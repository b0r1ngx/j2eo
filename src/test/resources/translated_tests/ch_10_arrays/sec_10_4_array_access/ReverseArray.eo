# 2022-07-18T16:09:25.607876209
# j2eo team
+alias stdlib.lang.class__System
+alias stdlib.primitives.null
+alias stdlib.lang.class__Object
+alias stdlib.primitives.prim__int
+alias stdlib.lang.class__String
+alias eo/org/polystat/stdlib.util.class__Arrays

[] > class__ReverseArray
  class__Object > super
  super > @
  [] > new
    class__Object.new > super
    super > @
    "class__ReverseArray" > className
    1 > address
    [this] > init
      seq > @
        TRUE
  # reverse :: int[] -> int[]
  [realArr] > reverse
    seq > @
      variableDeclaration_1
      variableDeclaration_2
      statementExpression_1
      statementExpression_2
      variableDeclaration_3
      variableDeclaration_4
      while_1
      return_1
    prim__int.constructor_1 > size
      prim__int.new
    [] > variableDeclaration_1
      size.write > @
        initializerSimple_1
    [] > initializerSimple_1
      literal_1 > @
    [] > literal_1
      prim__int.constructor_2 > @
        prim__int.new
        0
    prim__int.constructor_1 > reverseArr
      prim__int.new
    [] > variableDeclaration_2
      reverseArr.write > @
        initializerSimple_2
    [] > initializerSimple_2
      literal_2 > @
    [] > literal_2
      null > @
    [] > statementExpression_1
      simpleReference_1.write > @
        fieldAccess_1
    [] > simpleReference_1
      size > @
    [] > fieldAccess_1
      simpleReference_2.length > @
    [] > simpleReference_2
      realArr > @
    [] > statementExpression_2
      simpleReference_3.write > @
        arrayCreation_1
    [] > simpleReference_3
      reverseArr > @
    [] > arrayCreation_1
      FALSE > @
    prim__int.constructor_1 > i
      prim__int.new
    [] > variableDeclaration_3
      i.write > @
        initializerSimple_3
    [] > initializerSimple_3
      literal_3 > @
    [] > literal_3
      prim__int.constructor_2 > @
        prim__int.new
        0
    prim__int.constructor_1 > j
      prim__int.new
    [] > variableDeclaration_4
      j.write > @
        initializerSimple_4
    [] > initializerSimple_4
      binary_1 > @
    [] > binary_1
      simpleReference_4.sub > @
        literal_4
    [] > simpleReference_4
      size > @
    [] > literal_4
      prim__int.constructor_2 > @
        prim__int.new
        1
    [] > while_1
      binary_2.while > @
        [while_i]
          block_1 > @
    [] > binary_2
      simpleReference_5.less > @
        simpleReference_6
    [] > simpleReference_5
      i > @
    [] > simpleReference_6
      size > @
    [] > block_1
      seq > @
        statementExpression_3
        statementExpression_4
        statementExpression_5
      [] > statementExpression_3
        arrayAccess_1.write > @
          arrayAccess_2
      [] > arrayAccess_1
        simpleReference_7.get > @
          simpleReference_8.v
      [] > simpleReference_7
        reverseArr > @
      [] > simpleReference_8
        i > @
      [] > arrayAccess_2
        simpleReference_9.get > @
          simpleReference_10.v
      [] > simpleReference_9
        realArr > @
      [] > simpleReference_10
        j > @
      [] > statementExpression_4
        simpleReference_11.inc_post > @
      [] > simpleReference_11
        i > @
      [] > statementExpression_5
        simpleReference_12.dec_post > @
      [] > simpleReference_12
        j > @
    [] > return_1
      simpleReference_13 > @
    [] > simpleReference_13
      reverseArr > @
  # main :: String[] -> void
  [args] > main
    seq > @
      variableDeclaration_5
      variableDeclaration_6
      variableDeclaration_7
      statementExpression_6
      statementExpression_7
      statementExpression_8
      statementExpression_9
      statementExpression_10
    prim__int.constructor_1 > size
      prim__int.new
    [] > variableDeclaration_5
      size.write > @
        initializerSimple_5
    [] > initializerSimple_5
      literal_5 > @
    [] > literal_5
      prim__int.constructor_2 > @
        prim__int.new
        10
    prim__int.constructor_1 > numbers
      prim__int.new
    [] > variableDeclaration_6
      numbers.write > @
        initializerSimple_6
    [] > initializerSimple_6
      literal_6 > @
    [] > literal_6
      null > @
    prim__int.constructor_1 > rev
      prim__int.new
    [] > variableDeclaration_7
      rev.write > @
        initializerSimple_7
    [] > initializerSimple_7
      literal_7 > @
    [] > literal_7
      null > @
    [] > statementExpression_6
      simpleReference_14.write > @
        arrayCreation_2
    [] > simpleReference_14
      numbers > @
    [] > arrayCreation_2
      FALSE > @
    [] > statementExpression_7
      for_loop_placeholder > @
    [] > statementExpression_8
      simpleReference_15.write > @
        methodInvocation_1
    [] > simpleReference_15
      rev > @
    [] > methodInvocation_1
      this.reverse > @
        this
        simpleReference_16
    [] > simpleReference_16
      numbers > @
    [] > statementExpression_9
      class__System.out.println > @
        class__System.out
        binary_3
    [] > binary_3
      literal_8.add > @
        methodInvocation_2
    [] > literal_8
      class__String.constructor_2 > @
        class__String.new
        "Reverse = "
    [] > methodInvocation_2
      class__Arrays.toString > @
        simpleReference_18
    [] > simpleReference_18
      rev > @
    [] > statementExpression_10
      class__System.out.println > @
        class__System.out
        literal_9
    [] > literal_9
      class__String.constructor_2 > @
        class__String.new
        "passed"
  # null :: null -> void
  [this] > constructor
    seq > @
      initialization
      statementExpression_11
      this
    [] > initialization
      this.init > @
        this
    [] > statementExpression_11
      this.super.constructor > @
        this.super

[args...] > main
  class__ReverseArray.main > @
    *