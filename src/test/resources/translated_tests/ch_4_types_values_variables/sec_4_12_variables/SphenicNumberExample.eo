# 2022-07-14T15:59:29.421961
# j2eo team
+alias stdlib.lang.class__System
+alias stdlib.lang.class__Object
+alias stdlib.primitives.prim__boolean
+alias stdlib.primitives.prim__int
+alias stdlib.lang.class__String
+alias eo/org/polystat/stdlib.util.class__Arrays

[] > class__SphenicNumberExample
  class__Object > super
  super > @
  [] > new
    class__Object.new > super
    super > @
    "class__SphenicNumberExample" > className
    [this] > init
      seq > @
        TRUE
  prim__boolean.constructor_1 > arr
    prim__boolean.new
  # findPrime :: null -> void
  [] > findPrime
    seq > @
      statementExpression_1
      statementExpression_2
    [] > statementExpression_1
      class__Arrays.fill > @
        simpleReference_2
        literal_1
    [] > simpleReference_2
      arr > @
    [] > literal_1
      prim__boolean.constructor_2 > @
        prim__boolean.new
        TRUE
    [] > statementExpression_2
      for_loop_placeholder > @
  # isSphenic :: int -> int
  [N] > isSphenic
    seq > @
      variableDeclaration_1
      variableDeclaration_2
      variableDeclaration_3
      statementExpression_3
      ifThenElse_1
      return_1
    cage > arr1
    [] > variableDeclaration_1
      arr1.write > @
        initializerSimple_2
    [] > initializerSimple_2
      arrayCreation_1 > @
    [] > arrayCreation_1
      FALSE > @
    prim__int.constructor_1 > count
      prim__int.new
    [] > variableDeclaration_2
      count.write > @
        initializerSimple_3
    [] > initializerSimple_3
      literal_2 > @
    [] > literal_2
      prim__int.constructor_2 > @
        prim__int.new
        0
    prim__int.constructor_1 > j
      prim__int.new
    [] > variableDeclaration_3
      j.write > @
        initializerSimple_4
    [] > initializerSimple_4
      literal_3 > @
    [] > literal_3
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > statementExpression_3
      for_loop_placeholder > @
    [] > ifThenElse_1
      binary_1.if > @
        return_2
        empty_1
    [] > binary_1
      binary_2.and > @
        parenthesized_1
    [] > binary_2
      simpleReference_3.eq > @
        literal_4
    [] > simpleReference_3
      count > @
    [] > literal_4
      prim__int.constructor_2 > @
        prim__int.new
        8
    [] > parenthesized_1
      binary_3 > @
    [] > binary_3
      binary_4.and > @
        arrayAccess_1
    [] > binary_4
      arrayAccess_2.and > @
        arrayAccess_3
    [] > arrayAccess_2
      simpleReference_4.get > @
        arrayAccess_4.v
    [] > simpleReference_4
      arr > @
    [] > arrayAccess_4
      simpleReference_5.get > @
        literal_5.v
    [] > simpleReference_5
      arr1 > @
    [] > literal_5
      prim__int.constructor_2 > @
        prim__int.new
        1
    [] > arrayAccess_3
      simpleReference_6.get > @
        arrayAccess_5.v
    [] > simpleReference_6
      arr > @
    [] > arrayAccess_5
      simpleReference_7.get > @
        literal_6.v
    [] > simpleReference_7
      arr1 > @
    [] > literal_6
      prim__int.constructor_2 > @
        prim__int.new
        2
    [] > arrayAccess_1
      simpleReference_8.get > @
        arrayAccess_6.v
    [] > simpleReference_8
      arr > @
    [] > arrayAccess_6
      simpleReference_9.get > @
        literal_7.v
    [] > simpleReference_9
      arr1 > @
    [] > literal_7
      prim__int.constructor_2 > @
        prim__int.new
        3
    [] > return_2
      literal_8 > @
    [] > literal_8
      prim__int.constructor_2 > @
        prim__int.new
        1
    [] > empty_1
      TRUE > @
    [] > return_1
      literal_9 > @
    [] > literal_9
      prim__int.constructor_2 > @
        prim__int.new
        0
  # main :: String -> void
  [args[]] > main
    seq > @
      statementExpression_4
      variableDeclaration_4
      variableDeclaration_5
      ifThenElse_2
      statementExpression_5
    [] > statementExpression_4
      this.findPrime > @
        this
    prim__int.constructor_1 > n
      prim__int.new
    [] > variableDeclaration_4
      n.write > @
        initializerSimple_5
    [] > initializerSimple_5
      literal_10 > @
    [] > literal_10
      prim__int.constructor_2 > @
        prim__int.new
        250
    prim__int.constructor_1 > result
      prim__int.new
    [] > variableDeclaration_5
      result.write > @
        initializerSimple_6
    [] > initializerSimple_6
      methodInvocation_1 > @
    [] > methodInvocation_1
      this.isSphenic > @
        this
        simpleReference_10
    [] > simpleReference_10
      n > @
    [] > ifThenElse_2
      binary_5.if > @
        statementExpression_6
        statementExpression_7
    [] > binary_5
      simpleReference_11.eq > @
        literal_11
    [] > simpleReference_11
      result > @
    [] > literal_11
      prim__int.constructor_2 > @
        prim__int.new
        1
    [] > statementExpression_6
      class__System.out.println > @
        class__System.out
        literal_12
    [] > literal_12
      class__String.constructor_2 > @
        class__String.new
        "Yes, the given number is sphenic."
    [] > statementExpression_7
      class__System.out.println > @
        class__System.out
        literal_13
    [] > literal_13
      class__String.constructor_2 > @
        class__String.new
        "No, the given number is not a sphenic."
    [] > statementExpression_5
      class__System.out.println > @
        class__System.out
        literal_14
    [] > literal_14
      class__String.constructor_2 > @
        class__String.new
        "passed"
  # null :: null -> void
  [this] > constructor
    seq > @
      initialization
      statementExpression_8
      this
    [] > initialization
      this.init > @
        this
    [] > statementExpression_8
      this.super.constructor > @
        this.super