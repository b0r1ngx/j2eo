# 2022-07-13T17:59:01.641718800
# j2eo team
+package ch_10_arrays.sec_10_4_array_access
+alias stdlib.lang.class__System
+alias stdlib.lang.class__Object
+alias stdlib.primitives.prim__int
+alias stdlib.lang.class__String
+alias eo/org/polystat/stdlib.util.class__Arrays

[] > class__SeparateElementsByPositivityNegativity
  class__Object > super
  super > @
  [] > new
    class__Object.new > super
    super > @
    "class__SeparateElementsByPositivityNegativity" > className
    [this] > init
      seq > @
        TRUE
  # main :: String[] -> void
  [args] > main
    seq > @
      variableDeclaration_1
      variableDeclaration_2
      statementExpression_1
      statementExpression_2
      statementExpression_3
    prim__int.constructor_1 > n
      prim__int.new
    [] > variableDeclaration_1
      n.write > @
        initializerSimple_1
    [] > initializerSimple_1
      literal_1 > @
    [] > literal_1
      prim__int.constructor_2 > @
        prim__int.new
        10
    prim__int.constructor_1 > numbers
      prim__int.new
    [] > variableDeclaration_2
      numbers.write > @
        initializerSimple_2
    [] > initializerSimple_2
      arrayCreation_1 > @
    [] > arrayCreation_1
      FALSE > @
    [] > statementExpression_1
      for_loop_placeholder > @
    [] > statementExpression_2
      this.seperate > @
        this
        simpleReference_1
    [] > simpleReference_1
      numbers > @
    [] > statementExpression_3
      class__System.out.println > @
        class__System.out
        literal_2
    [] > literal_2
      class__String.constructor_2 > @
        class__String.new
        "passed"
  # seperate :: int[] -> void
  [numbers] > seperate
    seq > @
      variableDeclaration_3
      variableDeclaration_4
      variableDeclaration_5
      variableDeclaration_6
      statementExpression_4
      ifThenElse_1
      statementExpression_5
      statementExpression_6
      variableDeclaration_7
      variableDeclaration_8
      statementExpression_7
      statementExpression_8
      statementExpression_9
    prim__int.constructor_1 > posCount
      prim__int.new
    [] > variableDeclaration_3
      posCount.write > @
        initializerSimple_3
    [] > initializerSimple_3
      literal_3 > @
    [] > literal_3
      prim__int.constructor_2 > @
        prim__int.new
        0
    prim__int.constructor_1 > negCount
      prim__int.new
    [] > variableDeclaration_4
      negCount.write > @
        initializerSimple_4
    [] > initializerSimple_4
      literal_4 > @
    [] > literal_4
      prim__int.constructor_2 > @
        prim__int.new
        0
    prim__int.constructor_1 > positive
      prim__int.new
    [] > variableDeclaration_5
      positive.write > @
        initializerSimple_5
    [] > initializerSimple_5
      literal_5 > @
    [] > literal_5
      prim__int.constructor_2 > @
        prim__int.new
        0
    prim__int.constructor_1 > negative
      prim__int.new
    [] > variableDeclaration_6
      negative.write > @
        initializerSimple_6
    [] > initializerSimple_6
      literal_6 > @
    [] > literal_6
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > statementExpression_4
      for_loop_placeholder > @
    [] > ifThenElse_1
      binary_1.if > @
        block_1
        ifThenElse_2
    [] > binary_1
      simpleReference_2.eq > @
        literal_7
    [] > simpleReference_2
      posCount > @
    [] > literal_7
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > block_1
      seq > @
        statementExpression_10
        statementExpression_11
        return_1
      [] > statementExpression_10
        class__System.out.println > @
          class__System.out
          literal_8
      [] > literal_8
        class__String.constructor_2 > @
          class__String.new
          "Array contains only negative numbers"
      [] > statementExpression_11
        class__System.out.println > @
          class__System.out
          binary_2
      [] > binary_2
        literal_9.add > @
          methodInvocation_1
      [] > literal_9
        class__String.constructor_2 > @
          class__String.new
          "Array = "
      [] > methodInvocation_1
        class__Arrays.toString > @
          simpleReference_4
      [] > simpleReference_4
        numbers > @
    [] > ifThenElse_2
      binary_3.if > @
        block_2
        empty_2
    [] > binary_3
      simpleReference_5.eq > @
        literal_10
    [] > simpleReference_5
      negCount > @
    [] > literal_10
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > block_2
      seq > @
        statementExpression_12
        statementExpression_13
        return_2
      [] > statementExpression_12
        class__System.out.println > @
          class__System.out
          literal_11
      [] > literal_11
        class__String.constructor_2 > @
          class__String.new
          "Array contains only positive numbers"
      [] > statementExpression_13
        class__System.out.println > @
          class__System.out
          binary_4
      [] > binary_4
        literal_12.add > @
          methodInvocation_2
      [] > literal_12
        class__String.constructor_2 > @
          class__String.new
          "Array = "
      [] > methodInvocation_2
        class__Arrays.toString > @
          simpleReference_7
      [] > simpleReference_7
        numbers > @
    [] > empty_2
      TRUE > @
    [] > statementExpression_5
      simpleReference_8.write > @
        arrayCreation_2
    [] > simpleReference_8
      positive > @
    [] > arrayCreation_2
      FALSE > @
    [] > statementExpression_6
      simpleReference_9.write > @
        arrayCreation_3
    [] > simpleReference_9
      negative > @
    [] > arrayCreation_3
      FALSE > @
    prim__int.constructor_1 > i
      prim__int.new
    [] > variableDeclaration_7
      i.write > @
        initializerSimple_7
    [] > initializerSimple_7
      literal_13 > @
    [] > literal_13
      prim__int.constructor_2 > @
        prim__int.new
        0
    prim__int.constructor_1 > j
      prim__int.new
    [] > variableDeclaration_8
      j.write > @
        initializerSimple_8
    [] > initializerSimple_8
      literal_14 > @
    [] > literal_14
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > statementExpression_7
      for_loop_placeholder > @
    [] > statementExpression_8
      class__System.out.println > @
        class__System.out
        binary_5
    [] > binary_5
      literal_15.add > @
        methodInvocation_3
    [] > literal_15
      class__String.constructor_2 > @
        class__String.new
        "Negative numbers = "
    [] > methodInvocation_3
      class__Arrays.toString > @
        simpleReference_11
    [] > simpleReference_11
      negative > @
    [] > statementExpression_9
      class__System.out.println > @
        class__System.out
        binary_6
    [] > binary_6
      literal_16.add > @
        methodInvocation_4
    [] > literal_16
      class__String.constructor_2 > @
        class__String.new
        "Positive numbers = "
    [] > methodInvocation_4
      class__Arrays.toString > @
        simpleReference_13
    [] > simpleReference_13
      positive > @
  # null :: null -> void
  [this] > constructor
    seq > @
      initialization
      statementExpression_14
      this
    [] > initialization
      this.init > @
        this
    [] > statementExpression_14
      this.super.constructor > @
        this.super

[args...] > main
  class__SeparateElementsByPositivityNegativity.main > @
    *