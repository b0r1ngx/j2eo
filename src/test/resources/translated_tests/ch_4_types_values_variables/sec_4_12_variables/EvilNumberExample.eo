# 2022-07-13T17:59:02.602815
# j2eo team
+package ch_4_types_values_variables.sec_4_12_variables
+alias stdlib.lang.class__System
+alias stdlib.lang.class__Object
+alias stdlib.primitives.prim__boolean
+alias stdlib.primitives.prim__long
+alias stdlib.primitives.prim__int
+alias stdlib.lang.class__String

[] > class__EvilNumberExample
  class__Object > super
  super > @
  [] > new
    class__Object.new > super
    super > @
    "class__EvilNumberExample" > className
    [this] > init
      seq > @
        TRUE
  # checkNumber :: int -> boolean
  [n] > checkNumber
    seq > @
      variableDeclaration_1
      variableDeclaration_2
      while_1
      ifThenElse_1
      return_1
    prim__long.constructor_1 > binaryNumber
      prim__long.new
    [] > variableDeclaration_1
      binaryNumber.write > @
        initializerSimple_1
    [] > initializerSimple_1
      methodInvocation_1 > @
    [] > methodInvocation_1
      this.convertToBinary > @
        this
        simpleReference_1
    [] > simpleReference_1
      n > @
    prim__int.constructor_1 > count
      prim__int.new
    [] > variableDeclaration_2
      count.write > @
        initializerSimple_2
    [] > initializerSimple_2
      literal_1 > @
    [] > literal_1
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > while_1
      binary_1.while > @
        [while_i]
          block_1 > @
    [] > binary_1
      simpleReference_2.not_eq > @
        literal_2
    [] > simpleReference_2
      binaryNumber > @
    [] > literal_2
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > block_1
      seq > @
        ifThenElse_2
        statementExpression_1
      [] > ifThenElse_2
        binary_2.if > @
          statementExpression_2
          empty_2
      [] > binary_2
        binary_3.eq > @
          literal_3
      [] > binary_3
        simpleReference_3.binary_op_placeholder > @
          literal_4
      [] > simpleReference_3
        binaryNumber > @
      [] > literal_4
        prim__int.constructor_2 > @
          prim__int.new
          10
      [] > literal_3
        prim__int.constructor_2 > @
          prim__int.new
          1
      [] > statementExpression_2
        simpleReference_4.inc_post > @
      [] > simpleReference_4
        count > @
      [] > empty_2
        TRUE > @
      [] > statementExpression_1
        simpleReference_5.write > @
          binary_4
      [] > simpleReference_5
        binaryNumber > @
      [] > binary_4
        simpleReference_6.div > @
          literal_5
      [] > simpleReference_6
        binaryNumber > @
      [] > literal_5
        prim__int.constructor_2 > @
          prim__int.new
          10
    [] > ifThenElse_1
      binary_5.if > @
        return_2
        empty_3
    [] > binary_5
      binary_6.eq > @
        literal_6
    [] > binary_6
      simpleReference_7.binary_op_placeholder > @
        literal_7
    [] > simpleReference_7
      count > @
    [] > literal_7
      prim__int.constructor_2 > @
        prim__int.new
        2
    [] > literal_6
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > return_2
      literal_8 > @
    [] > literal_8
      prim__boolean.constructor_2 > @
        prim__boolean.new
        TRUE
    [] > empty_3
      TRUE > @
    [] > return_1
      literal_9 > @
    [] > literal_9
      prim__boolean.constructor_2 > @
        prim__boolean.new
        FALSE
  # convertToBinary :: int -> long
  [number] > convertToBinary
    seq > @
      variableDeclaration_3
      variableDeclaration_4
      variableDeclaration_5
      while_2
      return_3
    prim__long.constructor_1 > binaryNumber
      prim__long.new
    [] > variableDeclaration_3
      binaryNumber.write > @
        initializerSimple_3
    [] > initializerSimple_3
      literal_10 > @
    [] > literal_10
      prim__int.constructor_2 > @
        prim__int.new
        0
    prim__int.constructor_1 > rem
      prim__int.new
    [] > variableDeclaration_4
      rem.write > @
        initializerSimple_4
    [] > initializerSimple_4
      literal_11 > @
    [] > literal_11
      prim__int.constructor_2 > @
        prim__int.new
        0
    prim__int.constructor_1 > j
      prim__int.new
    [] > variableDeclaration_5
      j.write > @
        initializerSimple_5
    [] > initializerSimple_5
      literal_12 > @
    [] > literal_12
      prim__int.constructor_2 > @
        prim__int.new
        1
    [] > while_2
      binary_7.while > @
        [while_i]
          block_2 > @
    [] > binary_7
      simpleReference_8.not_eq > @
        literal_13
    [] > simpleReference_8
      number > @
    [] > literal_13
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > block_2
      seq > @
        statementExpression_3
        statementExpression_4
        statementExpression_5
        statementExpression_6
      [] > statementExpression_3
        simpleReference_9.write > @
          binary_8
      [] > simpleReference_9
        rem > @
      [] > binary_8
        simpleReference_10.binary_op_placeholder > @
          literal_14
      [] > simpleReference_10
        number > @
      [] > literal_14
        prim__int.constructor_2 > @
          prim__int.new
          2
      [] > statementExpression_4
        simpleReference_11.add_equal > @
          binary_9
      [] > simpleReference_11
        binaryNumber > @
      [] > binary_9
        simpleReference_12.mul > @
          simpleReference_13
      [] > simpleReference_12
        rem > @
      [] > simpleReference_13
        j > @
      [] > statementExpression_5
        simpleReference_14.write > @
          binary_10
      [] > simpleReference_14
        number > @
      [] > binary_10
        simpleReference_15.div > @
          literal_15
      [] > simpleReference_15
        number > @
      [] > literal_15
        prim__int.constructor_2 > @
          prim__int.new
          2
      [] > statementExpression_6
        simpleReference_16.write > @
          binary_11
      [] > simpleReference_16
        j > @
      [] > binary_11
        simpleReference_17.mul > @
          literal_16
      [] > simpleReference_17
        j > @
      [] > literal_16
        prim__int.constructor_2 > @
          prim__int.new
          10
    [] > return_3
      simpleReference_18 > @
    [] > simpleReference_18
      binaryNumber > @
  # main :: String[] -> void
  [args] > main
    seq > @
      variableDeclaration_6
      statementExpression_7
      ifThenElse_3
      statementExpression_8
    prim__int.constructor_1 > num
      prim__int.new
    [] > variableDeclaration_6
      num.write > @
        initializerSimple_6
    [] > initializerSimple_6
      literal_17 > @
    [] > literal_17
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > statementExpression_7
      simpleReference_19.write > @
        literal_18
    [] > simpleReference_19
      num > @
    [] > literal_18
      prim__int.constructor_2 > @
        prim__int.new
        435
    [] > ifThenElse_3
      methodInvocation_2.if > @
        statementExpression_9
        statementExpression_10
    [] > methodInvocation_2
      this.checkNumber > @
        this
        simpleReference_20
    [] > simpleReference_20
      num > @
    [] > statementExpression_9
      class__System.out.println > @
        class__System.out
        binary_12
    [] > binary_12
      simpleReference_21.add > @
        literal_19
    [] > simpleReference_21
      num > @
    [] > literal_19
      class__String.constructor_2 > @
        class__String.new
        " is an evil number"
    [] > statementExpression_10
      class__System.out.println > @
        class__System.out
        binary_13
    [] > binary_13
      simpleReference_22.add > @
        literal_20
    [] > simpleReference_22
      num > @
    [] > literal_20
      class__String.constructor_2 > @
        class__String.new
        " is not an evil number"
    [] > statementExpression_8
      class__System.out.println > @
        class__System.out
        literal_21
    [] > literal_21
      class__String.constructor_2 > @
        class__String.new
        "passed"
  # null :: null -> void
  [this] > constructor
    seq > @
      initialization
      statementExpression_11
      this
    [] > initialization
      this.init > @
        this
    [] > statementExpression_11
      this.super.constructor > @
        this.super

[args...] > main
  class__EvilNumberExample.main > @
    *