# 2022-07-14T15:56:26.024094600
# j2eo team
+alias stdlib.lang.class__System
+alias stdlib.lang.class__Object
+alias stdlib.primitives.prim__int
+alias stdlib.lang.class__String

[] > class__CountOddElements
  class__Object > super
  super > @
  [] > new
    class__Object.new > super
    super > @
    "class__CountOddElements" > className
    [this] > init
      seq > @
        TRUE
  # main :: String[] -> void
  [args] > main
    seq > @
      variableDeclaration_1
      variableDeclaration_2
      statementExpression_1
      statementExpression_2
    prim__int.constructor_1 > n
      prim__int.new
    [] > variableDeclaration_1
      n.write > @
        initializerSimple_1
    [] > initializerSimple_1
      literal_1 > @
    [] > literal_1
      prim__int.constructor_2 > @
        prim__int.new
        10
    prim__int.constructor_1 > numbers
      prim__int.new
    [] > variableDeclaration_2
      numbers.write > @
        initializerSimple_2
    [] > initializerSimple_2
      arrayCreation_1 > @
    [] > arrayCreation_1
      FALSE > @
    [] > statementExpression_1
      for_loop_placeholder > @
    [] > statementExpression_2
      this.countOddEven > @
        this
        simpleReference_1
    [] > simpleReference_1
      numbers > @
  # countOddEven :: int[] -> void
  [arr] > countOddEven
    seq > @
      variableDeclaration_3
      variableDeclaration_4
      statementExpression_3
      statementExpression_4
      statementExpression_5
      statementExpression_6
    prim__int.constructor_1 > oddCount
      prim__int.new
    [] > variableDeclaration_3
      oddCount.write > @
        initializerSimple_3
    [] > initializerSimple_3
      literal_2 > @
    [] > literal_2
      prim__int.constructor_2 > @
        prim__int.new
        0
    prim__int.constructor_1 > evenCount
      prim__int.new
    [] > variableDeclaration_4
      evenCount.write > @
        initializerSimple_4
    [] > initializerSimple_4
      literal_3 > @
    [] > literal_3
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > statementExpression_3
      for_loop_placeholder > @
    [] > statementExpression_4
      class__System.out.println > @
        class__System.out
        binary_1
    [] > binary_1
      literal_4.add > @
        simpleReference_2
    [] > literal_4
      class__String.constructor_2 > @
        class__String.new
        "Count of the Even numbers = "
    [] > simpleReference_2
      evenCount > @
    [] > statementExpression_5
      class__System.out.println > @
        class__System.out
        binary_2
    [] > binary_2
      literal_5.add > @
        simpleReference_3
    [] > literal_5
      class__String.constructor_2 > @
        class__String.new
        "Count of the Odd numbers = "
    [] > simpleReference_3
      oddCount > @
    [] > statementExpression_6
      class__System.out.println > @
        class__System.out
        literal_6
    [] > literal_6
      class__String.constructor_2 > @
        class__String.new
        "passed"
  # null :: null -> void
  [this] > constructor
    seq > @
      initialization
      statementExpression_7
      this
    [] > initialization
      this.init > @
        this
    [] > statementExpression_7
      this.super.constructor > @
        this.super

[args...] > main
  class__CountOddElements.main > @
    *