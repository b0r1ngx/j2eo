# 2022-07-13T17:59:02.680956700
# j2eo team
+package ch_4_types_values_variables.sec_4_12_variables
+alias stdlib.lang.class__System
+alias stdlib.lang.class__Object
+alias stdlib.primitives.prim__int
+alias stdlib.lang.class__String

[] > class__ReverseNumberExample
  class__Object > super
  super > @
  [] > new
    class__Object.new > super
    super > @
    "class__ReverseNumberExample" > className
    [this] > init
      seq > @
        TRUE
  # main :: String[] -> void
  [args] > main
    seq > @
      variableDeclaration_1
      variableDeclaration_2
      while_1
      statementExpression_1
      statementExpression_2
    prim__int.constructor_1 > number
      prim__int.new
    [] > variableDeclaration_1
      number.write > @
        initializerSimple_1
    [] > initializerSimple_1
      literal_1 > @
    [] > literal_1
      prim__int.constructor_2 > @
        prim__int.new
        987654
    prim__int.constructor_1 > reverse
      prim__int.new
    [] > variableDeclaration_2
      reverse.write > @
        initializerSimple_2
    [] > initializerSimple_2
      literal_2 > @
    [] > literal_2
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > while_1
      binary_1.while > @
        [while_i]
          block_1 > @
    [] > binary_1
      simpleReference_1.not_eq > @
        literal_3
    [] > simpleReference_1
      number > @
    [] > literal_3
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > block_1
      seq > @
        variableDeclaration_3
        statementExpression_3
        statementExpression_4
      prim__int.constructor_1 > remainder
        prim__int.new
      [] > variableDeclaration_3
        remainder.write > @
          initializerSimple_3
      [] > initializerSimple_3
        binary_2 > @
      [] > binary_2
        simpleReference_2.binary_op_placeholder > @
          literal_4
      [] > simpleReference_2
        number > @
      [] > literal_4
        prim__int.constructor_2 > @
          prim__int.new
          10
      [] > statementExpression_3
        simpleReference_3.write > @
          binary_3
      [] > simpleReference_3
        reverse > @
      [] > binary_3
        binary_4.add > @
          simpleReference_4
      [] > binary_4
        simpleReference_5.mul > @
          literal_5
      [] > simpleReference_5
        reverse > @
      [] > literal_5
        prim__int.constructor_2 > @
          prim__int.new
          10
      [] > simpleReference_4
        remainder > @
      [] > statementExpression_4
        simpleReference_6.write > @
          binary_5
      [] > simpleReference_6
        number > @
      [] > binary_5
        simpleReference_7.div > @
          literal_6
      [] > simpleReference_7
        number > @
      [] > literal_6
        prim__int.constructor_2 > @
          prim__int.new
          10
    [] > statementExpression_1
      class__System.out.println > @
        class__System.out
        binary_6
    [] > binary_6
      literal_7.add > @
        simpleReference_8
    [] > literal_7
      class__String.constructor_2 > @
        class__String.new
        "The reverse of the given number is: "
    [] > simpleReference_8
      reverse > @
    [] > statementExpression_2
      class__System.out.println > @
        class__System.out
        literal_8
    [] > literal_8
      class__String.constructor_2 > @
        class__String.new
        "passed"
  # null :: null -> void
  [this] > constructor
    seq > @
      initialization
      statementExpression_5
      this
    [] > initialization
      this.init > @
        this
    [] > statementExpression_5
      this.super.constructor > @
        this.super

[args...] > main
  class__ReverseNumberExample.main > @
    *