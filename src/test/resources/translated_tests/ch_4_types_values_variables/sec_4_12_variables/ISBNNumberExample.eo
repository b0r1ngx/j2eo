# 2022-07-13T17:59:02.624108800
# j2eo team
+package ch_4_types_values_variables.sec_4_12_variables
+alias stdlib.lang.class__System
+alias stdlib.lang.class__Object
+alias stdlib.primitives.prim__boolean
+alias stdlib.primitives.prim__int
+alias stdlib.lang.class__String
+alias stdlib.primitives.prim__long

[] > class__ISBNNumberExample
  class__Object > super
  super > @
  [] > new
    class__Object.new > super
    super > @
    "class__ISBNNumberExample" > className
    [this] > init
      seq > @
        TRUE
  # checkISBNNumber :: long -> boolean
  [number] > checkISBNNumber
    seq > @
      variableDeclaration_1
      variableDeclaration_2
      variableDeclaration_3
      variableDeclaration_4
      variableDeclaration_5
      variableDeclaration_6
      statementExpression_1
      ifThenElse_1
      statementExpression_2
      ifThenElse_2
      return_1
    prim__int.constructor_1 > sum
      prim__int.new
    [] > variableDeclaration_1
      sum.write > @
        initializerSimple_1
    [] > initializerSimple_1
      literal_1 > @
    [] > literal_1
      prim__int.constructor_2 > @
        prim__int.new
        0
    prim__int.constructor_1 > i
      prim__int.new
    [] > variableDeclaration_2
      TRUE > @
    prim__int.constructor_1 > t
      prim__int.new
    [] > variableDeclaration_3
      TRUE > @
    prim__int.constructor_1 > intNumber
      prim__int.new
    [] > variableDeclaration_4
      TRUE > @
    prim__int.constructor_1 > dNumber
      prim__int.new
    [] > variableDeclaration_5
      TRUE > @
    cage > strNumber
    [] > variableDeclaration_6
      TRUE > @
    [] > statementExpression_1
      simpleReference_1.write > @
        binary_1
    [] > simpleReference_1
      strNumber > @
    [] > binary_1
      literal_2.add > @
        simpleReference_2
    [] > literal_2
      class__String.constructor_2 > @
        class__String.new
        ""
    [] > simpleReference_2
      number > @
    [] > ifThenElse_1
      binary_2.if > @
        block_1
        empty_1
    [] > binary_2
      methodInvocation_1.not_eq > @
        literal_3
    [] > methodInvocation_1
      strNumber.length > @
        strNumber
    [] > literal_3
      prim__int.constructor_2 > @
        prim__int.new
        10
    [] > block_1
      seq > @
        return_2
      [] > return_2
        literal_4 > @
      [] > literal_4
        prim__boolean.constructor_2 > @
          prim__boolean.new
          FALSE
    [] > empty_1
      TRUE > @
    [] > statementExpression_2
      for_loop_placeholder > @
    [] > ifThenElse_2
      binary_3.if > @
        block_2
        empty_2
    [] > binary_3
      parenthesized_1.eq > @
        literal_5
    [] > parenthesized_1
      binary_4 > @
    [] > binary_4
      simpleReference_4.binary_op_placeholder > @
        literal_6
    [] > simpleReference_4
      sum > @
    [] > literal_6
      prim__int.constructor_2 > @
        prim__int.new
        11
    [] > literal_5
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > block_2
      seq > @
        return_3
      [] > return_3
        literal_7 > @
      [] > literal_7
        prim__boolean.constructor_2 > @
          prim__boolean.new
          TRUE
    [] > empty_2
      TRUE > @
    [] > return_1
      literal_8 > @
    [] > literal_8
      prim__boolean.constructor_2 > @
        prim__boolean.new
        FALSE
  # main :: String -> void
  [args[]] > main
    seq > @
      variableDeclaration_7
      variableDeclaration_8
      statementExpression_3
      statementExpression_4
      ifThenElse_3
      ifThenElse_4
      statementExpression_5
    prim__long.constructor_1 > n1
      prim__long.new
    [] > variableDeclaration_7
      TRUE > @
    prim__long.constructor_1 > n2
      prim__long.new
    [] > variableDeclaration_8
      TRUE > @
    [] > statementExpression_3
      simpleReference_5.write > @
        literal_9
    [] > simpleReference_5
      n1 > @
    [] > literal_9
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > statementExpression_4
      simpleReference_6.write > @
        literal_10
    [] > simpleReference_6
      n2 > @
    [] > literal_10
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > ifThenElse_3
      methodInvocation_2.if > @
        statementExpression_6
        statementExpression_7
    [] > methodInvocation_2
      this.checkISBNNumber > @
        this
        simpleReference_7
    [] > simpleReference_7
      n1 > @
    [] > statementExpression_6
      class__System.out.println > @
        class__System.out
        binary_5
    [] > binary_5
      simpleReference_8.add > @
        literal_11
    [] > simpleReference_8
      n1 > @
    [] > literal_11
      class__String.constructor_2 > @
        class__String.new
        " is a valid ISBN number"
    [] > statementExpression_7
      class__System.out.println > @
        class__System.out
        binary_6
    [] > binary_6
      simpleReference_9.add > @
        literal_12
    [] > simpleReference_9
      n1 > @
    [] > literal_12
      class__String.constructor_2 > @
        class__String.new
        " is not a valid ISBN number"
    [] > ifThenElse_4
      methodInvocation_3.if > @
        statementExpression_8
        statementExpression_9
    [] > methodInvocation_3
      this.checkISBNNumber > @
        this
        simpleReference_10
    [] > simpleReference_10
      n2 > @
    [] > statementExpression_8
      class__System.out.println > @
        class__System.out
        binary_7
    [] > binary_7
      simpleReference_11.add > @
        literal_13
    [] > simpleReference_11
      n2 > @
    [] > literal_13
      class__String.constructor_2 > @
        class__String.new
        " is a a valid ISBN number"
    [] > statementExpression_9
      class__System.out.println > @
        class__System.out
        binary_8
    [] > binary_8
      simpleReference_12.add > @
        literal_14
    [] > simpleReference_12
      n2 > @
    [] > literal_14
      class__String.constructor_2 > @
        class__String.new
        " is not a valid ISBN number"
    [] > statementExpression_5
      class__System.out.println > @
        class__System.out
        literal_15
    [] > literal_15
      class__String.constructor_2 > @
        class__String.new
        "passed"
  # null :: null -> void
  [this] > constructor
    seq > @
      initialization
      statementExpression_10
      this
    [] > initialization
      this.init > @
        this
    [] > statementExpression_10
      this.super.constructor > @
        this.super