# 2022-07-13T17:59:02.588148400
# j2eo team
+package ch_4_types_values_variables.sec_4_12_variables
+alias stdlib.lang.class__System
+alias stdlib.lang.class__Object
+alias stdlib.primitives.prim__boolean
+alias stdlib.primitives.prim__int
+alias stdlib.lang.class__String

[] > class__EmirpNumberExample
  class__Object > super
  super > @
  [] > new
    class__Object.new > super
    super > @
    "class__EmirpNumberExample" > className
    [this] > init
      seq > @
        TRUE
  # isPrime :: int -> boolean
  [n] > isPrime
    seq > @
      ifThenElse_1
      statementExpression_1
      return_1
    [] > ifThenElse_1
      binary_1.if > @
        return_2
        empty_1
    [] > binary_1
      simpleReference_1.leq > @
        literal_1
    [] > simpleReference_1
      n > @
    [] > literal_1
      prim__int.constructor_2 > @
        prim__int.new
        1
    [] > return_2
      literal_2 > @
    [] > literal_2
      prim__boolean.constructor_2 > @
        prim__boolean.new
        FALSE
    [] > empty_1
      TRUE > @
    [] > statementExpression_1
      for_loop_placeholder > @
    [] > return_1
      literal_3 > @
    [] > literal_3
      prim__boolean.constructor_2 > @
        prim__boolean.new
        TRUE
  # isEmirp :: int -> boolean
  [n] > isEmirp
    seq > @
      ifThenElse_2
      variableDeclaration_1
      while_1
      return_3
    [] > ifThenElse_2
      binary_2.if > @
        return_4
        empty_2
    [] > binary_2
      methodInvocation_1.eq > @
        literal_4
    [] > methodInvocation_1
      this.isPrime > @
        this
        simpleReference_2
    [] > simpleReference_2
      n > @
    [] > literal_4
      prim__boolean.constructor_2 > @
        prim__boolean.new
        FALSE
    [] > return_4
      literal_5 > @
    [] > literal_5
      prim__boolean.constructor_2 > @
        prim__boolean.new
        FALSE
    [] > empty_2
      TRUE > @
    prim__int.constructor_1 > reverse
      prim__int.new
    [] > variableDeclaration_1
      reverse.write > @
        initializerSimple_1
    [] > initializerSimple_1
      literal_6 > @
    [] > literal_6
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > while_1
      binary_3.while > @
        [while_i]
          block_1 > @
    [] > binary_3
      simpleReference_3.not_eq > @
        literal_7
    [] > simpleReference_3
      n > @
    [] > literal_7
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > block_1
      seq > @
        variableDeclaration_2
        statementExpression_2
        statementExpression_3
      prim__int.constructor_1 > digit
        prim__int.new
      [] > variableDeclaration_2
        digit.write > @
          initializerSimple_2
      [] > initializerSimple_2
        binary_4 > @
      [] > binary_4
        simpleReference_4.binary_op_placeholder > @
          literal_8
      [] > simpleReference_4
        n > @
      [] > literal_8
        prim__int.constructor_2 > @
          prim__int.new
          10
      [] > statementExpression_2
        simpleReference_5.write > @
          binary_5
      [] > simpleReference_5
        reverse > @
      [] > binary_5
        binary_6.add > @
          simpleReference_6
      [] > binary_6
        simpleReference_7.mul > @
          literal_9
      [] > simpleReference_7
        reverse > @
      [] > literal_9
        prim__int.constructor_2 > @
          prim__int.new
          10
      [] > simpleReference_6
        digit > @
      [] > statementExpression_3
        simpleReference_8.write > @
          binary_7
      [] > simpleReference_8
        n > @
      [] > binary_7
        simpleReference_9.div > @
          literal_10
      [] > simpleReference_9
        n > @
      [] > literal_10
        prim__int.constructor_2 > @
          prim__int.new
          10
    [] > return_3
      methodInvocation_2 > @
    [] > methodInvocation_2
      this.isPrime > @
        this
        simpleReference_10
    [] > simpleReference_10
      reverse > @
  # main :: String -> void
  [args[]] > main
    seq > @
      variableDeclaration_3
      ifThenElse_3
      statementExpression_4
    prim__int.constructor_1 > n
      prim__int.new
    [] > variableDeclaration_3
      n.write > @
        initializerSimple_3
    [] > initializerSimple_3
      literal_11 > @
    [] > literal_11
      prim__int.constructor_2 > @
        prim__int.new
        338
    [] > ifThenElse_3
      binary_8.if > @
        statementExpression_5
        statementExpression_6
    [] > binary_8
      methodInvocation_3.eq > @
        literal_12
    [] > methodInvocation_3
      this.isEmirp > @
        this
        simpleReference_11
    [] > simpleReference_11
      n > @
    [] > literal_12
      prim__boolean.constructor_2 > @
        prim__boolean.new
        TRUE
    [] > statementExpression_5
      class__System.out.println > @
        class__System.out
        literal_13
    [] > literal_13
      class__String.constructor_2 > @
        class__String.new
        "Yes, the given number is an emirp number."
    [] > statementExpression_6
      class__System.out.println > @
        class__System.out
        literal_14
    [] > literal_14
      class__String.constructor_2 > @
        class__String.new
        "No, the given number is not an emirp number."
    [] > statementExpression_4
      class__System.out.println > @
        class__System.out
        literal_15
    [] > literal_15
      class__String.constructor_2 > @
        class__String.new
        "passed"
  # null :: null -> void
  [this] > constructor
    seq > @
      initialization
      statementExpression_7
      this
    [] > initialization
      this.init > @
        this
    [] > statementExpression_7
      this.super.constructor > @
        this.super