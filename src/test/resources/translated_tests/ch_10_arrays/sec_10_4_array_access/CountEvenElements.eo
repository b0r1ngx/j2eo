# 2022-07-14T15:53:24.124216700
# j2eo team
+alias stdlib.lang.class__System
+alias stdlib.lang.class__Object
+alias stdlib.primitives.prim__int
+alias stdlib.lang.class__String
+alias eo/org/polystat/stdlib.util.class__Arrays

[] > class__CountEvenElements
  class__Object > super
  super > @
  [] > new
    class__Object.new > super
    super > @
    "class__CountEvenElements" > className
    [this] > init
      seq > @
        TRUE
  # main :: String[] -> void
  [args] > main
    seq > @
      variableDeclaration_1
      variableDeclaration_2
      statementExpression_1
      statementExpression_2
    prim__int.constructor_1 > n
      prim__int.new
    [] > variableDeclaration_1
      n.write > @
        initializerSimple_1
    [] > initializerSimple_1
      literal_1 > @
    [] > literal_1
      prim__int.constructor_2 > @
        prim__int.new
        10
    prim__int.constructor_1 > numbers
      prim__int.new
    [] > variableDeclaration_2
      numbers.write > @
        initializerSimple_2
    [] > initializerSimple_2
      arrayCreation_1 > @
    [] > arrayCreation_1
      FALSE > @
    [] > statementExpression_1
      for_loop_placeholder > @
    [] > statementExpression_2
      this.displayOddEven > @
        this
        simpleReference_1
    [] > simpleReference_1
      numbers > @
  # displayOddEven :: int[] -> void
  [numbers] > displayOddEven
    seq > @
      variableDeclaration_3
      variableDeclaration_4
      variableDeclaration_5
      variableDeclaration_6
      statementExpression_3
      statementExpression_4
      statementExpression_5
      statementExpression_6
      variableDeclaration_7
      variableDeclaration_8
      statementExpression_7
      statementExpression_8
      statementExpression_9
      statementExpression_10
    prim__int.constructor_1 > countEven
      prim__int.new
    [] > variableDeclaration_3
      countEven.write > @
        initializerSimple_3
    [] > initializerSimple_3
      literal_2 > @
    [] > literal_2
      prim__int.constructor_2 > @
        prim__int.new
        0
    prim__int.constructor_1 > countOdd
      prim__int.new
    [] > variableDeclaration_4
      countOdd.write > @
        initializerSimple_4
    [] > initializerSimple_4
      literal_3 > @
    [] > literal_3
      prim__int.constructor_2 > @
        prim__int.new
        0
    prim__int.constructor_1 > even
      prim__int.new
    [] > variableDeclaration_5
      even.write > @
        initializerSimple_5
    [] > initializerSimple_5
      literal_4 > @
    [] > literal_4
      prim__int.constructor_2 > @
        prim__int.new
        0
    prim__int.constructor_1 > odd
      prim__int.new
    [] > variableDeclaration_6
      odd.write > @
        initializerSimple_6
    [] > initializerSimple_6
      literal_5 > @
    [] > literal_5
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > statementExpression_3
      for_loop_placeholder > @
    [] > statementExpression_4
      simpleReference_2.write > @
        binary_1
    [] > simpleReference_2
      countOdd > @
    [] > binary_1
      fieldAccess_1.sub > @
        simpleReference_3
    [] > fieldAccess_1
      simpleReference_4.length > @
    [] > simpleReference_4
      numbers > @
    [] > simpleReference_3
      countEven > @
    [] > statementExpression_5
      simpleReference_5.write > @
        arrayCreation_2
    [] > simpleReference_5
      even > @
    [] > arrayCreation_2
      FALSE > @
    [] > statementExpression_6
      simpleReference_6.write > @
        arrayCreation_3
    [] > simpleReference_6
      odd > @
    [] > arrayCreation_3
      FALSE > @
    prim__int.constructor_1 > i
      prim__int.new
    [] > variableDeclaration_7
      i.write > @
        initializerSimple_7
    [] > initializerSimple_7
      literal_6 > @
    [] > literal_6
      prim__int.constructor_2 > @
        prim__int.new
        0
    prim__int.constructor_1 > j
      prim__int.new
    [] > variableDeclaration_8
      j.write > @
        initializerSimple_8
    [] > initializerSimple_8
      literal_7 > @
    [] > literal_7
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > statementExpression_7
      for_loop_placeholder > @
    [] > statementExpression_8
      class__System.out.println > @
        class__System.out
        binary_2
    [] > binary_2
      literal_8.add > @
        methodInvocation_1
    [] > literal_8
      class__String.constructor_2 > @
        class__String.new
        "Even numbers: "
    [] > methodInvocation_1
      class__Arrays.toString > @
        simpleReference_8
    [] > simpleReference_8
      even > @
    [] > statementExpression_9
      class__System.out.println > @
        class__System.out
        binary_3
    [] > binary_3
      literal_9.add > @
        methodInvocation_2
    [] > literal_9
      class__String.constructor_2 > @
        class__String.new
        "Odd numbers: "
    [] > methodInvocation_2
      class__Arrays.toString > @
        simpleReference_10
    [] > simpleReference_10
      odd > @
    [] > statementExpression_10
      class__System.out.println > @
        class__System.out
        literal_10
    [] > literal_10
      class__String.constructor_2 > @
        class__String.new
        "passed"
  # null :: null -> void
  [this] > constructor
    seq > @
      initialization
      statementExpression_11
      this
    [] > initialization
      this.init > @
        this
    [] > statementExpression_11
      this.super.constructor > @
        this.super

[args...] > main
  class__CountEvenElements.main > @
    *