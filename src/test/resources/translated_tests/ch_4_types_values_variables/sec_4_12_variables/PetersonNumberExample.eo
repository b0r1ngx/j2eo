# 2022-07-18T16:13:17.989263128
# j2eo team
+alias stdlib.lang.class__System
+alias stdlib.lang.class__Object
+alias stdlib.primitives.prim__boolean
+alias stdlib.primitives.prim__long
+alias stdlib.primitives.prim__int
+alias stdlib.lang.class__String

[] > class__PetersonNumberExample
  class__Object > super
  super > @
  [] > new
    class__Object.new > super
    super > @
    "class__PetersonNumberExample" > className
    1 > address
    [this] > init
      seq > @
        TRUE
  cage > factorial
  # main :: String -> void
  [args[]] > main
    seq > @
      variableDeclaration_1
      ifThenElse_1
      statementExpression_1
    prim__int.constructor_1 > n
      prim__int.new
    [] > variableDeclaration_1
      n.write > @
        initializerSimple_2
    [] > initializerSimple_2
      literal_1 > @
    [] > literal_1
      prim__int.constructor_2 > @
        prim__int.new
        474
    [] > ifThenElse_1
      methodInvocation_1.if > @
        statementExpression_2
        statementExpression_3
    [] > methodInvocation_1
      this.isPeterson > @
        this
        simpleReference_1
    [] > simpleReference_1
      n > @
    [] > statementExpression_2
      class__System.out.println > @
        class__System.out
        literal_2
    [] > literal_2
      class__String.constructor_2 > @
        class__String.new
        "The given number is a Peterson number."
    [] > statementExpression_3
      class__System.out.println > @
        class__System.out
        literal_3
    [] > literal_3
      class__String.constructor_2 > @
        class__String.new
        "The given number is not a Peterson number."
    [] > statementExpression_1
      class__System.out.println > @
        class__System.out
        literal_4
    [] > literal_4
      class__String.constructor_2 > @
        class__String.new
        "passed"
  # isPeterson :: int -> boolean
  [n] > isPeterson
    seq > @
      variableDeclaration_2
      variableDeclaration_3
      while_1
      return_1
    prim__int.constructor_1 > num
      prim__int.new
    [] > variableDeclaration_2
      num.write > @
        initializerSimple_3
    [] > initializerSimple_3
      simpleReference_2 > @
    [] > simpleReference_2
      n > @
    prim__int.constructor_1 > sum
      prim__int.new
    [] > variableDeclaration_3
      sum.write > @
        initializerSimple_4
    [] > initializerSimple_4
      literal_5 > @
    [] > literal_5
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > while_1
      binary_1.while > @
        [while_i]
          block_1 > @
    [] > binary_1
      simpleReference_3.greater > @
        literal_6
    [] > simpleReference_3
      n > @
    [] > literal_6
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > block_1
      seq > @
        variableDeclaration_4
        statementExpression_4
        statementExpression_5
      prim__int.constructor_1 > digit
        prim__int.new
      [] > variableDeclaration_4
        digit.write > @
          initializerSimple_5
      [] > initializerSimple_5
        binary_2 > @
      [] > binary_2
        simpleReference_4.binary_op_placeholder > @
          literal_7
      [] > simpleReference_4
        n > @
      [] > literal_7
        prim__int.constructor_2 > @
          prim__int.new
          10
      [] > statementExpression_4
        simpleReference_5.add_equal > @
          arrayAccess_1
      [] > simpleReference_5
        sum > @
      [] > arrayAccess_1
        simpleReference_6.get > @
          simpleReference_7.v
      [] > simpleReference_6
        factorial > @
      [] > simpleReference_7
        digit > @
      [] > statementExpression_5
        simpleReference_8.write > @
          binary_3
      [] > simpleReference_8
        n > @
      [] > binary_3
        simpleReference_9.div > @
          literal_8
      [] > simpleReference_9
        n > @
      [] > literal_8
        prim__int.constructor_2 > @
          prim__int.new
          10
    [] > return_1
      parenthesized_1 > @
    [] > parenthesized_1
      binary_4 > @
    [] > binary_4
      simpleReference_10.eq > @
        simpleReference_11
    [] > simpleReference_10
      sum > @
    [] > simpleReference_11
      num > @
  # null :: null -> void
  [this] > constructor
    seq > @
      initialization
      statementExpression_6
      this
    [] > initialization
      this.init > @
        this
    [] > statementExpression_6
      this.super.constructor > @
        this.super