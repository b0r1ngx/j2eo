# 2022-07-18T16:10:39.868541065
# j2eo team
+alias stdlib.lang.class__System
+alias stdlib.lang.class__Object
+alias stdlib.lang.class__String
+alias stdlib.primitives.prim__int

[] > class__DivideString
  class__Object > super
  super > @
  [] > new
    class__Object.new > super
    super > @
    "class__DivideString" > className
    1 > address
    [this] > init
      seq > @
        TRUE
  # main :: String[] -> void
  [args] > main
    seq > @
      variableDeclaration_1
      variableDeclaration_2
      variableDeclaration_3
      variableDeclaration_4
      variableDeclaration_5
      variableDeclaration_6
      ifThenElse_1
      statementExpression_1
    cage > str
    [] > variableDeclaration_1
      str.write > @
        initializerSimple_1
    [] > initializerSimple_1
      literal_1 > @
    [] > literal_1
      class__String.constructor_2 > @
        class__String.new
        "aaaabbbbcccc"
    prim__int.constructor_1 > len
      prim__int.new
    [] > variableDeclaration_2
      len.write > @
        initializerSimple_2
    [] > initializerSimple_2
      methodInvocation_1 > @
    [] > methodInvocation_1
      str.length > @
        str
    prim__int.constructor_1 > n
      prim__int.new
    [] > variableDeclaration_3
      n.write > @
        initializerSimple_3
    [] > initializerSimple_3
      literal_2 > @
    [] > literal_2
      prim__int.constructor_2 > @
        prim__int.new
        3
    prim__int.constructor_1 > temp
      prim__int.new
    [] > variableDeclaration_4
      temp.write > @
        initializerSimple_4
    [] > initializerSimple_4
      literal_3 > @
    [] > literal_3
      prim__int.constructor_2 > @
        prim__int.new
        0
    prim__int.constructor_1 > chars
      prim__int.new
    [] > variableDeclaration_5
      chars.write > @
        initializerSimple_5
    [] > initializerSimple_5
      binary_1 > @
    [] > binary_1
      simpleReference_2.div > @
        simpleReference_3
    [] > simpleReference_2
      len > @
    [] > simpleReference_3
      n > @
    cage > equalStr
    [] > variableDeclaration_6
      equalStr.write > @
        initializerSimple_6
    [] > initializerSimple_6
      arrayCreation_1 > @
    [] > arrayCreation_1
      FALSE > @
    [] > ifThenElse_1
      binary_2.if > @
        block_1
        block_2
    [] > binary_2
      binary_3.not_eq > @
        literal_4
    [] > binary_3
      simpleReference_4.binary_op_placeholder > @
        simpleReference_5
    [] > simpleReference_4
      len > @
    [] > simpleReference_5
      n > @
    [] > literal_4
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > block_1
      seq > @
        statementExpression_2
      [] > statementExpression_2
        class__System.out.println > @
          class__System.out
          binary_4
      [] > binary_4
        binary_5.add > @
          literal_5
      [] > binary_5
        literal_6.add > @
          simpleReference_6
      [] > literal_6
        class__String.constructor_2 > @
          class__String.new
          "Sorry this string cannot be divided into "
      [] > simpleReference_6
        n > @
      [] > literal_5
        class__String.constructor_2 > @
          class__String.new
          " equal parts."
    [] > block_2
      seq > @
        statementExpression_3
        statementExpression_4
        statementExpression_5
      [] > statementExpression_3
        for_loop_placeholder > @
      [] > statementExpression_4
        class__System.out.println > @
          class__System.out
          binary_6
      [] > binary_6
        simpleReference_7.add > @
          literal_7
      [] > simpleReference_7
        n > @
      [] > literal_7
        class__String.constructor_2 > @
          class__String.new
          " equal parts of given string are "
      [] > statementExpression_5
        for_loop_placeholder > @
    [] > statementExpression_1
      class__System.out.println > @
        class__System.out
        literal_8
    [] > literal_8
      class__String.constructor_2 > @
        class__String.new
        "passed"
  # null :: null -> void
  [this] > constructor
    seq > @
      initialization
      statementExpression_6
      this
    [] > initialization
      this.init > @
        this
    [] > statementExpression_6
      this.super.constructor > @
        this.super

[args...] > main
  class__DivideString.main > @
    *