# 2022-07-13T17:59:02.587156
# j2eo team
+package ch_4_types_values_variables.sec_4_12_variables
+alias stdlib.lang.class__System
+alias stdlib.lang.class__Object
+alias stdlib.primitives.prim__boolean
+alias stdlib.primitives.prim__int
+alias stdlib.lang.class__String

[] > class__DuckNumberExample
  class__Object > super
  super > @
  [] > new
    class__Object.new > super
    super > @
    "class__DuckNumberExample" > className
    [this] > init
      seq > @
        TRUE
  # checkNumber :: int -> boolean
  [number] > checkNumber
    seq > @
      while_1
      return_1
    [] > while_1
      binary_1.while > @
        [while_i]
          block_1 > @
    [] > binary_1
      simpleReference_1.not_eq > @
        literal_1
    [] > simpleReference_1
      number > @
    [] > literal_1
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > block_1
      seq > @
        ifThenElse_1
        statementExpression_1
      [] > ifThenElse_1
        binary_2.if > @
          return_2
          empty_2
      [] > binary_2
        binary_3.eq > @
          literal_2
      [] > binary_3
        simpleReference_2.binary_op_placeholder > @
          literal_3
      [] > simpleReference_2
        number > @
      [] > literal_3
        prim__int.constructor_2 > @
          prim__int.new
          10
      [] > literal_2
        prim__int.constructor_2 > @
          prim__int.new
          0
      [] > return_2
        literal_4 > @
      [] > literal_4
        prim__boolean.constructor_2 > @
          prim__boolean.new
          TRUE
      [] > empty_2
        TRUE > @
      [] > statementExpression_1
        simpleReference_3.write > @
          binary_4
      [] > simpleReference_3
        number > @
      [] > binary_4
        simpleReference_4.div > @
          literal_5
      [] > simpleReference_4
        number > @
      [] > literal_5
        prim__int.constructor_2 > @
          prim__int.new
          10
    [] > return_1
      literal_6 > @
    [] > literal_6
      prim__boolean.constructor_2 > @
        prim__boolean.new
        FALSE
  # main :: String -> void
  [args[]] > main
    seq > @
      variableDeclaration_1
      variableDeclaration_2
      statementExpression_2
      statementExpression_3
      ifThenElse_2
      ifThenElse_3
      statementExpression_4
    prim__int.constructor_1 > n1
      prim__int.new
    [] > variableDeclaration_1
      TRUE > @
    prim__int.constructor_1 > n2
      prim__int.new
    [] > variableDeclaration_2
      TRUE > @
    [] > statementExpression_2
      simpleReference_5.write > @
        literal_7
    [] > simpleReference_5
      n1 > @
    [] > literal_7
      prim__int.constructor_2 > @
        prim__int.new
        490
    [] > statementExpression_3
      simpleReference_6.write > @
        literal_8
    [] > simpleReference_6
      n2 > @
    [] > literal_8
      prim__int.constructor_2 > @
        prim__int.new
        443
    [] > ifThenElse_2
      methodInvocation_1.if > @
        statementExpression_5
        statementExpression_6
    [] > methodInvocation_1
      this.checkNumber > @
        this
        simpleReference_7
    [] > simpleReference_7
      n1 > @
    [] > statementExpression_5
      class__System.out.println > @
        class__System.out
        binary_5
    [] > binary_5
      simpleReference_8.add > @
        literal_9
    [] > simpleReference_8
      n1 > @
    [] > literal_9
      class__String.constructor_2 > @
        class__String.new
        " is a Duck number"
    [] > statementExpression_6
      class__System.out.println > @
        class__System.out
        binary_6
    [] > binary_6
      simpleReference_9.add > @
        literal_10
    [] > simpleReference_9
      n1 > @
    [] > literal_10
      class__String.constructor_2 > @
        class__String.new
        " is not a Duck number"
    [] > ifThenElse_3
      methodInvocation_2.if > @
        statementExpression_7
        statementExpression_8
    [] > methodInvocation_2
      this.checkNumber > @
        this
        simpleReference_10
    [] > simpleReference_10
      n2 > @
    [] > statementExpression_7
      class__System.out.println > @
        class__System.out
        binary_7
    [] > binary_7
      simpleReference_11.add > @
        literal_11
    [] > simpleReference_11
      n2 > @
    [] > literal_11
      class__String.constructor_2 > @
        class__String.new
        " is a Duck number"
    [] > statementExpression_8
      class__System.out.println > @
        class__System.out
        binary_8
    [] > binary_8
      simpleReference_12.add > @
        literal_12
    [] > simpleReference_12
      n2 > @
    [] > literal_12
      class__String.constructor_2 > @
        class__String.new
        " is not a Duck number"
    [] > statementExpression_4
      class__System.out.println > @
        class__System.out
        literal_13
    [] > literal_13
      class__String.constructor_2 > @
        class__String.new
        "passed"
  # null :: null -> void
  [this] > constructor
    seq > @
      initialization
      statementExpression_9
      this
    [] > initialization
      this.init > @
        this
    [] > statementExpression_9
      this.super.constructor > @
        this.super