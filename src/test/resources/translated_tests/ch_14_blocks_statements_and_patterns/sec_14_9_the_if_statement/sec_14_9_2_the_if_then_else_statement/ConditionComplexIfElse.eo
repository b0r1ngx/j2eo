# 2022-07-18T16:12:19.770480804
# j2eo team
+alias stdlib.lang.class__System
+alias stdlib.lang.class__Object
+alias stdlib.primitives.prim__boolean
+alias stdlib.primitives.prim__int
+alias stdlib.lang.class__String

[] > class__ConditionComplexIfElse
  class__Object > super
  super > @
  [] > new
    class__Object.new > super
    super > @
    "class__ConditionComplexIfElse" > className
    1 > address
    [this] > init
      seq > @
        TRUE
  # cond :: int -> int -> boolean
  [a b] > cond
    seq > @
      statementExpression_1
      ifThenElse_1
      ifThenElse_2
      ifThenElse_3
    [] > statementExpression_1
      class__System.out.println > @
        class__System.out
        binary_1
    [] > binary_1
      binary_2.add > @
        simpleReference_1
    [] > binary_2
      simpleReference_2.add > @
        literal_1
    [] > simpleReference_2
      a > @
    [] > literal_1
      class__String.constructor_2 > @
        class__String.new
        ", "
    [] > simpleReference_1
      b > @
    [] > ifThenElse_1
      binary_3.if > @
        block_1
        empty_1
    [] > binary_3
      simpleReference_3.less > @
        literal_2
    [] > simpleReference_3
      b > @
    [] > literal_2
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > block_1
      seq > @
        return_1
      [] > return_1
        literal_3 > @
      [] > literal_3
        prim__boolean.constructor_2 > @
          prim__boolean.new
          FALSE
    [] > empty_1
      TRUE > @
    [] > ifThenElse_2
      binary_4.if > @
        block_2
        empty_2
    [] > binary_4
      simpleReference_4.greater > @
        literal_4
    [] > simpleReference_4
      b > @
    [] > literal_4
      prim__int.constructor_2 > @
        prim__int.new
        10
    [] > block_2
      seq > @
        return_2
      [] > return_2
        literal_5 > @
      [] > literal_5
        prim__boolean.constructor_2 > @
          prim__boolean.new
          TRUE
    [] > empty_2
      TRUE > @
    [] > ifThenElse_3
      binary_5.if > @
        block_3
        block_4
    [] > binary_5
      binary_6.and > @
        binary_7
    [] > binary_6
      binary_8.eq > @
        literal_6
    [] > binary_8
      simpleReference_5.binary_op_placeholder > @
        simpleReference_6
    [] > simpleReference_5
      a > @
    [] > simpleReference_6
      b > @
    [] > literal_6
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > binary_7
      simpleReference_7.not_eq > @
        literal_7
    [] > simpleReference_7
      b > @
    [] > literal_7
      prim__int.constructor_2 > @
        prim__int.new
        1
    [] > block_3
      seq > @
        statementExpression_2
        return_3
      [] > statementExpression_2
        simpleReference_8.inc_post > @
      [] > simpleReference_8
        a > @
      [] > return_3
        methodInvocation_1 > @
      [] > methodInvocation_1
        this.cond > @
          this
          unaryPrefix_1
          unaryPrefix_2
      [] > unaryPrefix_1
        simpleReference_9.inc_pre > @
      [] > simpleReference_9
        a > @
      [] > unaryPrefix_2
        simpleReference_10.inc_pre > @
      [] > simpleReference_10
        b > @
    [] > block_4
      seq > @
        statementExpression_3
        return_4
      [] > statementExpression_3
        simpleReference_11.dec_post > @
      [] > simpleReference_11
        b > @
      [] > return_4
        methodInvocation_2 > @
      [] > methodInvocation_2
        this.cond > @
          this
          unaryPrefix_3
          unaryPrefix_4
      [] > unaryPrefix_3
        simpleReference_12.dec_pre > @
      [] > simpleReference_12
        a > @
      [] > unaryPrefix_4
        simpleReference_13.dec_pre > @
      [] > simpleReference_13
        b > @
  # main :: String[] -> void
  [args] > main
    seq > @
      statementExpression_4
      statementExpression_5
      statementExpression_6
    [] > statementExpression_4
      class__System.out.println > @
        class__System.out
        binary_9
    [] > binary_9
      literal_8.add > @
        methodInvocation_3
    [] > literal_8
      class__String.constructor_2 > @
        class__String.new
        "cond(8, 5) = "
    [] > methodInvocation_3
      this.cond > @
        this
        literal_9
        literal_10
    [] > literal_9
      prim__int.constructor_2 > @
        prim__int.new
        8
    [] > literal_10
      prim__int.constructor_2 > @
        prim__int.new
        5
    [] > statementExpression_5
      class__System.out.println > @
        class__System.out
        binary_10
    [] > binary_10
      literal_11.add > @
        methodInvocation_4
    [] > literal_11
      class__String.constructor_2 > @
        class__String.new
        "cond(6, 5) = "
    [] > methodInvocation_4
      this.cond > @
        this
        literal_12
        literal_13
    [] > literal_12
      prim__int.constructor_2 > @
        prim__int.new
        6
    [] > literal_13
      prim__int.constructor_2 > @
        prim__int.new
        3
    [] > statementExpression_6
      class__System.out.println > @
        class__System.out
        literal_14
    [] > literal_14
      class__String.constructor_2 > @
        class__String.new
        "passed"
  # null :: null -> void
  [this] > constructor
    seq > @
      initialization
      statementExpression_7
      this
    [] > initialization
      this.init > @
        this
    [] > statementExpression_7
      this.super.constructor > @
        this.super

[args...] > main
  class__ConditionComplexIfElse.main > @
    *