# 2022-07-18T16:12:31.704198937
# j2eo team
+alias stdlib.lang.class__System
+alias stdlib.lang.class__Object
+alias stdlib.primitives.prim__boolean
+alias stdlib.primitives.prim__int
+alias stdlib.lang.class__String

[] > class__FascinatingNumberExample
  class__Object > super
  super > @
  [] > new
    class__Object.new > super
    super > @
    "class__FascinatingNumberExample" > className
    1 > address
    [this] > init
      seq > @
        TRUE
  # main :: String -> void
  [args[]] > main
    seq > @
      variableDeclaration_1
      variableDeclaration_2
      variableDeclaration_3
      statementExpression_1
      statementExpression_2
      statementExpression_3
      variableDeclaration_4
      variableDeclaration_5
      statementExpression_4
      ifThenElse_1
      statementExpression_5
    prim__int.constructor_1 > num
      prim__int.new
    [] > variableDeclaration_1
      TRUE > @
    prim__int.constructor_1 > n2
      prim__int.new
    [] > variableDeclaration_2
      TRUE > @
    prim__int.constructor_1 > n3
      prim__int.new
    [] > variableDeclaration_3
      TRUE > @
    [] > statementExpression_1
      simpleReference_1.write > @
        literal_1
    [] > simpleReference_1
      num > @
    [] > literal_1
      prim__int.constructor_2 > @
        prim__int.new
        460
    [] > statementExpression_2
      simpleReference_2.write > @
        binary_1
    [] > simpleReference_2
      n2 > @
    [] > binary_1
      simpleReference_3.mul > @
        literal_2
    [] > simpleReference_3
      num > @
    [] > literal_2
      prim__int.constructor_2 > @
        prim__int.new
        2
    [] > statementExpression_3
      simpleReference_4.write > @
        binary_2
    [] > simpleReference_4
      n3 > @
    [] > binary_2
      simpleReference_5.mul > @
        literal_3
    [] > simpleReference_5
      num > @
    [] > literal_3
      prim__int.constructor_2 > @
        prim__int.new
        3
    cage > concatstr
    [] > variableDeclaration_4
      concatstr.write > @
        initializerSimple_1
    [] > initializerSimple_1
      binary_3 > @
    [] > binary_3
      binary_4.add > @
        simpleReference_6
    [] > binary_4
      binary_5.add > @
        simpleReference_7
    [] > binary_5
      simpleReference_8.add > @
        literal_4
    [] > simpleReference_8
      num > @
    [] > literal_4
      class__String.constructor_2 > @
        class__String.new
        ""
    [] > simpleReference_7
      n2 > @
    [] > simpleReference_6
      n3 > @
    prim__boolean.constructor_1 > found
      prim__boolean.new
    [] > variableDeclaration_5
      found.write > @
        initializerSimple_2
    [] > initializerSimple_2
      literal_5 > @
    [] > literal_5
      prim__boolean.constructor_2 > @
        prim__boolean.new
        TRUE
    [] > statementExpression_4
      for_loop_placeholder > @
    [] > ifThenElse_1
      simpleReference_9.if > @
        statementExpression_6
        statementExpression_7
    [] > simpleReference_9
      found > @
    [] > statementExpression_6
      class__System.out.println > @
        class__System.out
        binary_6
    [] > binary_6
      simpleReference_10.add > @
        literal_6
    [] > simpleReference_10
      num > @
    [] > literal_6
      class__String.constructor_2 > @
        class__String.new
        " is a fascinating number."
    [] > statementExpression_7
      class__System.out.println > @
        class__System.out
        binary_7
    [] > binary_7
      simpleReference_11.add > @
        literal_7
    [] > simpleReference_11
      num > @
    [] > literal_7
      class__String.constructor_2 > @
        class__String.new
        " is not a fascinating number."
    [] > statementExpression_5
      class__System.out.println > @
        class__System.out
        literal_8
    [] > literal_8
      class__String.constructor_2 > @
        class__String.new
        "passed"
  # null :: null -> void
  [this] > constructor
    seq > @
      initialization
      statementExpression_8
      this
    [] > initialization
      this.init > @
        this
    [] > statementExpression_8
      this.super.constructor > @
        this.super