# 2022-07-18T16:12:57.817834095
# j2eo team
+alias stdlib.primitives.prim__float
+alias stdlib.primitives.prim__char
+alias stdlib.primitives.prim__double
+alias stdlib.primitives.prim__int
+alias stdlib.lang.class__String
+alias stdlib.lang.class__System
+alias stdlib.primitives.null
+alias stdlib.lang.class__Object
+alias stdlib.primitives.prim__boolean
+alias stdlib.primitives.prim__long

[] > class__SimpleLexicalLiterals
  class__Object > super
  super > @
  [] > new
    class__Object.new > super
    super > @
    "class__SimpleLexicalLiterals" > className
    1 > address
    [this] > init
      seq > @
        TRUE
  # main :: String[] -> void
  [args] > main
    seq > @
      variableDeclaration_1
      variableDeclaration_2
      variableDeclaration_3
      variableDeclaration_4
      variableDeclaration_5
      variableDeclaration_6
      variableDeclaration_7
      variableDeclaration_8
      variableDeclaration_9
      variableDeclaration_10
      statementExpression_1
    prim__int.constructor_1 > v1
      prim__int.new
    [] > variableDeclaration_1
      v1.write > @
        initializerSimple_1
    [] > initializerSimple_1
      literal_1 > @
    [] > literal_1
      prim__int.constructor_2 > @
        prim__int.new
        5
    prim__long.constructor_1 > v2
      prim__long.new
    [] > variableDeclaration_2
      v2.write > @
        initializerSimple_2
    [] > initializerSimple_2
      literal_2 > @
    [] > literal_2
      prim__int.constructor_2 > @
        prim__int.new
        0
    prim__long.constructor_1 > v3
      prim__long.new
    [] > variableDeclaration_3
      v3.write > @
        initializerSimple_3
    [] > initializerSimple_3
      literal_3 > @
    [] > literal_3
      prim__int.constructor_2 > @
        prim__int.new
        0
    prim__float.constructor_1 > v4
      prim__float.new
    [] > variableDeclaration_4
      v4.write > @
        initializerSimple_4
    [] > initializerSimple_4
      literal_4 > @
    [] > literal_4
      prim__float.constructor_2 > @
        prim__float.new
        5.0
    prim__float.constructor_1 > v5
      prim__float.new
    [] > variableDeclaration_5
      v5.write > @
        initializerSimple_5
    [] > initializerSimple_5
      literal_5 > @
    [] > literal_5
      prim__float.constructor_2 > @
        prim__float.new
        5.0
    prim__double.constructor_1 > v6
      prim__double.new
    [] > variableDeclaration_6
      v6.write > @
        initializerSimple_6
    [] > initializerSimple_6
      literal_6 > @
    [] > literal_6
      prim__float.constructor_2 > @
        prim__float.new
        5.0
    prim__boolean.constructor_1 > v7
      prim__boolean.new
    [] > variableDeclaration_7
      v7.write > @
        initializerSimple_7
    [] > initializerSimple_7
      binary_1 > @
    [] > binary_1
      simpleReference_1.eq > @
        simpleReference_2
    [] > simpleReference_1
      v1 > @
    [] > simpleReference_2
      v2 > @
    prim__char.constructor_1 > v8
      prim__char.new
    [] > variableDeclaration_8
      v8.write > @
        initializerSimple_8
    [] > initializerSimple_8
      literal_7 > @
    [] > literal_7
      prim__int.constructor_2 > @
        prim__int.new
        123456
    cage > v9
    [] > variableDeclaration_9
      v9.write > @
        initializerSimple_9
    [] > initializerSimple_9
      literal_8 > @
    [] > literal_8
      class__String.constructor_2 > @
        class__String.new
        "5"
    cage > v10
    [] > variableDeclaration_10
      v10.write > @
        initializerSimple_10
    [] > initializerSimple_10
      literal_9 > @
    [] > literal_9
      null > @
    [] > statementExpression_1
      class__System.out.println > @
        class__System.out
        literal_10
    [] > literal_10
      class__String.constructor_2 > @
        class__String.new
        "passed"
  # null :: null -> void
  [this] > constructor
    seq > @
      initialization
      statementExpression_2
      this
    [] > initialization
      this.init > @
        this
    [] > statementExpression_2
      this.super.constructor > @
        this.super

[args...] > main
  class__SimpleLexicalLiterals.main > @
    *