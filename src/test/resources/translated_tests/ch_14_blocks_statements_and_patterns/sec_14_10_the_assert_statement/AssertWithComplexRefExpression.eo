# 2022-07-13T17:59:01.754258
# j2eo team
+package ch_14_blocks_statements_and_patterns.sec_14_10_the_assert_statement
+alias stdlib.lang.class__Object
+alias stdlib.lang.class__System
+alias stdlib.lang.class__String

[] > class__AssertWithComplexRefExpression
  class__Object > super
  super > @
  [] > new
    class__Object.new > super
    super > @
    "class__AssertWithComplexRefExpression" > className
    [this] > init
      seq > @
        TRUE
  # main :: String[] -> void
  [args] > main
    seq > @
      variableDeclaration_1
      variableDeclaration_2
      assert_1
      statementExpression_1
    cage > a
    [] > variableDeclaration_1
      a.write > @
        initializerSimple_1
    [] > initializerSimple_1
      literal_1 > @
    [] > literal_1
      class__String.constructor_2 > @
        class__String.new
        "a"
    cage > b
    [] > variableDeclaration_2
      b.write > @
        initializerSimple_2
    [] > initializerSimple_2
      literal_2 > @
    [] > literal_2
      class__String.constructor_2 > @
        class__String.new
        "b"
    [] > assert_1
      methodInvocation_1.if > @
        TRUE
        []
          literal_3 > msg
    [] > methodInvocation_1
      unsupported_qualifier.equals > @
        unsupported_qualifier
        binary_1
    [] > binary_1
      simpleReference_1.add > @
        simpleReference_2
    [] > simpleReference_1
      a > @
    [] > simpleReference_2
      b > @
    [] > literal_3
      class__String.constructor_2 > @
        class__String.new
        "Never printed"
    [] > statementExpression_1
      class__System.out.println > @
        class__System.out
        literal_4
    [] > literal_4
      class__String.constructor_2 > @
        class__String.new
        "passed"
  # null :: null -> void
  [this] > constructor
    seq > @
      initialization
      statementExpression_2
      this
    [] > initialization
      this.init > @
        this
    [] > statementExpression_2
      this.super.constructor > @
        this.super

[args...] > main
  class__AssertWithComplexRefExpression.main > @
    *