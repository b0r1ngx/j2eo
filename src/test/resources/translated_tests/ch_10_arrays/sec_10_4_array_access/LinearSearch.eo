# 2022-07-14T15:55:50.743036400
# j2eo team
+alias stdlib.lang.class__System
+alias stdlib.lang.class__Object
+alias stdlib.primitives.prim__int
+alias stdlib.lang.class__String

[] > class__LinearSearch
  class__Object > super
  super > @
  [] > new
    class__Object.new > super
    super > @
    "class__LinearSearch" > className
    [this] > init
      seq > @
        TRUE
  # main :: String[] -> void
  [args] > main
    seq > @
      variableDeclaration_1
      variableDeclaration_2
      variableDeclaration_3
      variableDeclaration_4
      ifThenElse_1
      statementExpression_1
    prim__int.constructor_1 > arr
      prim__int.new
    [] > variableDeclaration_1
      arr.write > @
        initializerArray_1
    [] > initializerArray_1
      * > @
        initializerSimple_1
        initializerSimple_2
        initializerSimple_3
        initializerSimple_4
        initializerSimple_5
    [] > initializerSimple_1
      literal_1 > @
    [] > literal_1
      prim__int.constructor_2 > @
        prim__int.new
        50
    [] > initializerSimple_2
      literal_2 > @
    [] > literal_2
      prim__int.constructor_2 > @
        prim__int.new
        90
    [] > initializerSimple_3
      literal_3 > @
    [] > literal_3
      prim__int.constructor_2 > @
        prim__int.new
        30
    [] > initializerSimple_4
      literal_4 > @
    [] > literal_4
      prim__int.constructor_2 > @
        prim__int.new
        70
    [] > initializerSimple_5
      literal_5 > @
    [] > literal_5
      prim__int.constructor_2 > @
        prim__int.new
        60
    prim__int.constructor_1 > key
      prim__int.new
    [] > variableDeclaration_2
      key.write > @
        initializerSimple_6
    [] > initializerSimple_6
      literal_6 > @
    [] > literal_6
      prim__int.constructor_2 > @
        prim__int.new
        10
    prim__int.constructor_1 > size
      prim__int.new
    [] > variableDeclaration_3
      size.write > @
        initializerSimple_7
    [] > initializerSimple_7
      fieldAccess_1 > @
    [] > fieldAccess_1
      simpleReference_1.length > @
    [] > simpleReference_1
      arr > @
    prim__int.constructor_1 > index
      prim__int.new
    [] > variableDeclaration_4
      index.write > @
        initializerSimple_8
    [] > initializerSimple_8
      methodInvocation_1 > @
    [] > methodInvocation_1
      this.linearSearch > @
        this
        simpleReference_2
        simpleReference_3
        simpleReference_4
    [] > simpleReference_2
      arr > @
    [] > simpleReference_3
      size > @
    [] > simpleReference_4
      key > @
    [] > ifThenElse_1
      binary_1.if > @
        statementExpression_2
        statementExpression_3
    [] > binary_1
      simpleReference_5.eq > @
        unaryPrefix_1
    [] > simpleReference_5
      index > @
    [] > unaryPrefix_1
      literal_7.neg > @
    [] > literal_7
      prim__int.constructor_2 > @
        prim__int.new
        1
    [] > statementExpression_2
      class__System.out.println > @
        class__System.out
        binary_2
    [] > binary_2
      simpleReference_6.add > @
        literal_8
    [] > simpleReference_6
      key > @
    [] > literal_8
      class__String.constructor_2 > @
        class__String.new
        " not Found."
    [] > statementExpression_3
      class__System.out.println > @
        class__System.out
        binary_3
    [] > binary_3
      binary_4.add > @
        simpleReference_7
    [] > binary_4
      simpleReference_8.add > @
        literal_9
    [] > simpleReference_8
      key > @
    [] > literal_9
      class__String.constructor_2 > @
        class__String.new
        " Found at Index = "
    [] > simpleReference_7
      index > @
    [] > statementExpression_1
      class__System.out.println > @
        class__System.out
        literal_10
    [] > literal_10
      class__String.constructor_2 > @
        class__String.new
        "passed"
  # linearSearch :: int[] -> int -> int -> int
  [arr size key] > linearSearch
    seq > @
      statementExpression_4
      return_1
    [] > statementExpression_4
      for_loop_placeholder > @
    [] > return_1
      unaryPrefix_2 > @
    [] > unaryPrefix_2
      literal_11.neg > @
    [] > literal_11
      prim__int.constructor_2 > @
        prim__int.new
        1
  # null :: null -> void
  [this] > constructor
    seq > @
      initialization
      statementExpression_5
      this
    [] > initialization
      this.init > @
        this
    [] > statementExpression_5
      this.super.constructor > @
        this.super

[args...] > main
  class__LinearSearch.main > @
    *