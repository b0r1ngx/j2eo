# 2022-07-14T15:49:03.601343500
# j2eo team
+alias stdlib.lang.class__System
+alias stdlib.lang.class__Object
+alias stdlib.lang.class__String
+alias stdlib.primitives.prim__int

[] > class__SwapStrings
  class__Object > super
  super > @
  [] > new
    class__Object.new > super
    super > @
    "class__SwapStrings" > className
    [this] > init
      seq > @
        TRUE
  # main :: String[] -> void
  [args] > main
    seq > @
      variableDeclaration_1
      variableDeclaration_2
      statementExpression_1
      statementExpression_2
      statementExpression_3
      statementExpression_4
      statementExpression_5
      statementExpression_6
    cage > str1
    [] > variableDeclaration_1
      str1.write > @
        initializerSimple_1
    [] > initializerSimple_1
      literal_1 > @
    [] > literal_1
      class__String.constructor_2 > @
        class__String.new
        "Good "
    cage > str2
    [] > variableDeclaration_2
      str2.write > @
        initializerSimple_2
    [] > initializerSimple_2
      literal_2 > @
    [] > literal_2
      class__String.constructor_2 > @
        class__String.new
        "morning "
    [] > statementExpression_1
      class__System.out.println > @
        class__System.out
        binary_1
    [] > binary_1
      binary_2.add > @
        simpleReference_1
    [] > binary_2
      binary_3.add > @
        literal_3
    [] > binary_3
      literal_4.add > @
        simpleReference_2
    [] > literal_4
      class__String.constructor_2 > @
        class__String.new
        "Strings before swapping: "
    [] > simpleReference_2
      str1 > @
    [] > literal_3
      class__String.constructor_2 > @
        class__String.new
        " "
    [] > simpleReference_1
      str2 > @
    [] > statementExpression_2
      simpleReference_3.write > @
        binary_4
    [] > simpleReference_3
      str1 > @
    [] > binary_4
      simpleReference_4.add > @
        simpleReference_5
    [] > simpleReference_4
      str1 > @
    [] > simpleReference_5
      str2 > @
    [] > statementExpression_3
      simpleReference_6.write > @
        methodInvocation_1
    [] > simpleReference_6
      str2 > @
    [] > methodInvocation_1
      str1.substring > @
        str1
        literal_5
        parenthesized_1
    [] > literal_5
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > parenthesized_1
      binary_5 > @
    [] > binary_5
      methodInvocation_2.sub > @
        methodInvocation_3
    [] > methodInvocation_2
      str1.length > @
        str1
    [] > methodInvocation_3
      str2.length > @
        str2
    [] > statementExpression_4
      simpleReference_10.write > @
        methodInvocation_4
    [] > simpleReference_10
      str1 > @
    [] > methodInvocation_4
      str1.substring > @
        str1
        methodInvocation_5
    [] > methodInvocation_5
      str2.length > @
        str2
    [] > statementExpression_5
      class__System.out.println > @
        class__System.out
        binary_6
    [] > binary_6
      binary_7.add > @
        simpleReference_13
    [] > binary_7
      binary_8.add > @
        literal_6
    [] > binary_8
      literal_7.add > @
        simpleReference_14
    [] > literal_7
      class__String.constructor_2 > @
        class__String.new
        "Strings after swapping: "
    [] > simpleReference_14
      str1 > @
    [] > literal_6
      class__String.constructor_2 > @
        class__String.new
        " "
    [] > simpleReference_13
      str2 > @
    [] > statementExpression_6
      class__System.out.println > @
        class__System.out
        literal_8
    [] > literal_8
      class__String.constructor_2 > @
        class__String.new
        "passed"
  # null :: null -> void
  [this] > constructor
    seq > @
      initialization
      statementExpression_7
      this
    [] > initialization
      this.init > @
        this
    [] > statementExpression_7
      this.super.constructor > @
        this.super

[args...] > main
  class__SwapStrings.main > @
    *