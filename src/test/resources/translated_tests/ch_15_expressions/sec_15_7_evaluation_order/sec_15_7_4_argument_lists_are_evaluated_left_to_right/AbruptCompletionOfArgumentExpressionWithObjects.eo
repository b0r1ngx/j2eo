# 2022-07-13T17:59:02.278840200
# j2eo team
+package ch_15_expressions.sec_15_7_evaluation_order.sec_15_7_4_argument_lists_are_evaluated_left_to_right
+alias stdlib.lang.class__System
+alias stdlib.lang.class__Object
+alias stdlib.lang.class__String
+alias stdlib.primitives.prim__int

[] > class__AbruptCompletionOfArgumentExpressionWithObjects
  class__Object > super
  super > @
  [] > new
    class__Object.new > super
    super > @
    "class__AbruptCompletionOfArgumentExpressionWithObjects" > className
    [this] > init
      seq > @
        TRUE
  # test :: S -> S -> S -> S
  [a b c] > test
    seq > @
      return_1
    [] > return_1
      instanceCreation_1 > @
    [] > instanceCreation_1
      class__S.constructor > @
        class__S.new
        binary_1
    [] > binary_1
      binary_2.add > @
        fieldAccess_1
    [] > binary_2
      fieldAccess_2.add > @
        fieldAccess_3
    [] > fieldAccess_2
      simpleReference_1.id > @
    [] > simpleReference_1
      a > @
    [] > fieldAccess_3
      simpleReference_2.id > @
    [] > simpleReference_2
      b > @
    [] > fieldAccess_1
      simpleReference_3.id > @
    [] > simpleReference_3
      c > @
  # oops :: S -> S
  [s] > oops
    seq > @
      statementExpression_1
      return_2
    [] > statementExpression_1
      class__System.out.println > @
        class__System.out
        fieldAccess_5
    [] > fieldAccess_5
      simpleReference_4.id > @
    [] > simpleReference_4
      s > @
    [] > return_2
      instanceCreation_2 > @
    [] > instanceCreation_2
      class__S.constructor > @
        class__S.new
        literal_1
    [] > literal_1
      prim__int.constructor_2 > @
        prim__int.new
        0
  # main :: String[] -> void
  [args] > main
    seq > @
      variableDeclaration_1
      statementExpression_2
      statementExpression_3
    cage > s
    [] > variableDeclaration_1
      s.write > @
        initializerSimple_1
    [] > initializerSimple_1
      instanceCreation_3 > @
    [] > instanceCreation_3
      class__S.constructor > @
        class__S.new
        literal_2
    [] > literal_2
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > statementExpression_2
      this.test > @
        this
        binary_3
        methodInvocation_1
        binary_4
    [] > binary_3
      simpleReference_5.write > @
        instanceCreation_4
    [] > simpleReference_5
      s > @
    [] > instanceCreation_4
      class__S.constructor > @
        class__S.new
        literal_3
    [] > literal_3
      prim__int.constructor_2 > @
        prim__int.new
        1
    [] > methodInvocation_1
      this.oops > @
        this
        simpleReference_6
    [] > simpleReference_6
      s > @
    [] > binary_4
      simpleReference_7.write > @
        instanceCreation_5
    [] > simpleReference_7
      s > @
    [] > instanceCreation_5
      class__S.constructor > @
        class__S.new
        literal_4
    [] > literal_4
      prim__int.constructor_2 > @
        prim__int.new
        2
    [] > statementExpression_3
      class__System.out.println > @
        class__System.out
        literal_5
    [] > literal_5
      class__String.constructor_2 > @
        class__String.new
        "passed"
  # null :: null -> void
  [this] > constructor
    seq > @
      initialization
      statementExpression_4
      this
    [] > initialization
      this.init > @
        this
    [] > statementExpression_4
      this.super.constructor > @
        this.super

[] > class__S
  class__Object > super
  super > @
  [] > new
    class__Object.new > super
    super > @
    "class__S" > className
    [this] > init
      seq > @
        TRUE
    prim__int.constructor_1 > id
      prim__int.new
  # null :: int -> void
  [this id] > constructor
    seq > @
      initialization
      statementExpression_5
      this
    [] > initialization
      this.init > @
        this
    [] > statementExpression_5
      fieldAccess_7.write > @
        simpleReference_8
    [] > fieldAccess_7
      this_3.id > @
    [] > this_3
      this > @
    [] > simpleReference_8
      id > @

[args...] > main
  class__AbruptCompletionOfArgumentExpressionWithObjects.main > @
    *