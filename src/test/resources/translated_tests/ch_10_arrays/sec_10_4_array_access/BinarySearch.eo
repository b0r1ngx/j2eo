# 2022-07-14T15:59:05.629842500
# j2eo team
+alias stdlib.lang.class__System
+alias stdlib.lang.class__Object
+alias stdlib.primitives.prim__int
+alias stdlib.lang.class__String

[] > class__BinarySearch
  class__Object > super
  super > @
  [] > new
    class__Object.new > super
    super > @
    "class__BinarySearch" > className
    [this] > init
      seq > @
        TRUE
  # main :: String[] -> void
  [args] > main
    seq > @
      variableDeclaration_1
      variableDeclaration_2
      variableDeclaration_3
      ifThenElse_1
      statementExpression_1
    prim__int.constructor_1 > arr
      prim__int.new
    [] > variableDeclaration_1
      arr.write > @
        initializerArray_1
    [] > initializerArray_1
      * > @
        initializerSimple_1
        initializerSimple_2
        initializerSimple_3
        initializerSimple_4
        initializerSimple_5
        initializerSimple_6
        initializerSimple_7
        initializerSimple_8
        initializerSimple_9
        initializerSimple_10
    [] > initializerSimple_1
      literal_1 > @
    [] > literal_1
      prim__int.constructor_2 > @
        prim__int.new
        10
    [] > initializerSimple_2
      literal_2 > @
    [] > literal_2
      prim__int.constructor_2 > @
        prim__int.new
        20
    [] > initializerSimple_3
      literal_3 > @
    [] > literal_3
      prim__int.constructor_2 > @
        prim__int.new
        30
    [] > initializerSimple_4
      literal_4 > @
    [] > literal_4
      prim__int.constructor_2 > @
        prim__int.new
        40
    [] > initializerSimple_5
      literal_5 > @
    [] > literal_5
      prim__int.constructor_2 > @
        prim__int.new
        50
    [] > initializerSimple_6
      literal_6 > @
    [] > literal_6
      prim__int.constructor_2 > @
        prim__int.new
        60
    [] > initializerSimple_7
      literal_7 > @
    [] > literal_7
      prim__int.constructor_2 > @
        prim__int.new
        70
    [] > initializerSimple_8
      literal_8 > @
    [] > literal_8
      prim__int.constructor_2 > @
        prim__int.new
        80
    [] > initializerSimple_9
      literal_9 > @
    [] > literal_9
      prim__int.constructor_2 > @
        prim__int.new
        90
    [] > initializerSimple_10
      literal_10 > @
    [] > literal_10
      prim__int.constructor_2 > @
        prim__int.new
        100
    prim__int.constructor_1 > key
      prim__int.new
    [] > variableDeclaration_2
      key.write > @
        initializerSimple_11
    [] > initializerSimple_11
      literal_11 > @
    [] > literal_11
      prim__int.constructor_2 > @
        prim__int.new
        40
    prim__int.constructor_1 > index
      prim__int.new
    [] > variableDeclaration_3
      index.write > @
        initializerSimple_12
    [] > initializerSimple_12
      methodInvocation_1 > @
    [] > methodInvocation_1
      this.binarySearch > @
        this
        simpleReference_1
        literal_12
        fieldAccess_1
        simpleReference_2
    [] > simpleReference_1
      arr > @
    [] > literal_12
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > fieldAccess_1
      simpleReference_3.length > @
    [] > simpleReference_3
      arr > @
    [] > simpleReference_2
      key > @
    [] > ifThenElse_1
      binary_1.if > @
        statementExpression_2
        statementExpression_3
    [] > binary_1
      simpleReference_4.eq > @
        unaryPrefix_1
    [] > simpleReference_4
      index > @
    [] > unaryPrefix_1
      literal_13.neg > @
    [] > literal_13
      prim__int.constructor_2 > @
        prim__int.new
        1
    [] > statementExpression_2
      class__System.out.println > @
        class__System.out
        binary_2
    [] > binary_2
      simpleReference_5.add > @
        literal_14
    [] > simpleReference_5
      key > @
    [] > literal_14
      class__String.constructor_2 > @
        class__String.new
        " not Found."
    [] > statementExpression_3
      class__System.out.println > @
        class__System.out
        binary_3
    [] > binary_3
      binary_4.add > @
        simpleReference_6
    [] > binary_4
      simpleReference_7.add > @
        literal_15
    [] > simpleReference_7
      key > @
    [] > literal_15
      class__String.constructor_2 > @
        class__String.new
        " Found at Index = "
    [] > simpleReference_6
      index > @
    [] > statementExpression_1
      class__System.out.println > @
        class__System.out
        literal_16
    [] > literal_16
      class__String.constructor_2 > @
        class__String.new
        "passed"
  # binarySearch :: int[] -> int -> int -> int -> int
  [arr low high key] > binarySearch
    seq > @
      ifThenElse_2
      return_1
    [] > ifThenElse_2
      binary_5.if > @
        block_1
        empty_2
    [] > binary_5
      simpleReference_8.geq > @
        simpleReference_9
    [] > simpleReference_8
      high > @
    [] > simpleReference_9
      low > @
    [] > block_1
      seq > @
        variableDeclaration_4
        ifThenElse_3
        ifThenElse_4
        return_2
      prim__int.constructor_1 > mid
        prim__int.new
      [] > variableDeclaration_4
        mid.write > @
          initializerSimple_13
      [] > initializerSimple_13
        binary_6 > @
      [] > binary_6
        simpleReference_10.add > @
          binary_7
      [] > simpleReference_10
        low > @
      [] > binary_7
        parenthesized_1.div > @
          literal_17
      [] > parenthesized_1
        binary_8 > @
      [] > binary_8
        simpleReference_11.sub > @
          simpleReference_12
      [] > simpleReference_11
        high > @
      [] > simpleReference_12
        low > @
      [] > literal_17
        prim__int.constructor_2 > @
          prim__int.new
          2
      [] > ifThenElse_3
        binary_9.if > @
          return_3
          empty_3
      [] > binary_9
        arrayAccess_1.eq > @
          simpleReference_13
      [] > arrayAccess_1
        simpleReference_14.get > @
          simpleReference_15.v
      [] > simpleReference_14
        arr > @
      [] > simpleReference_15
        mid > @
      [] > simpleReference_13
        key > @
      [] > return_3
        simpleReference_16 > @
      [] > simpleReference_16
        mid > @
      [] > empty_3
        TRUE > @
      [] > ifThenElse_4
        binary_10.if > @
          return_4
          empty_4
      [] > binary_10
        arrayAccess_2.greater > @
          simpleReference_17
      [] > arrayAccess_2
        simpleReference_18.get > @
          simpleReference_19.v
      [] > simpleReference_18
        arr > @
      [] > simpleReference_19
        mid > @
      [] > simpleReference_17
        key > @
      [] > return_4
        methodInvocation_2 > @
      [] > methodInvocation_2
        this.binarySearch > @
          this
          simpleReference_20
          simpleReference_21
          binary_11
          simpleReference_22
      [] > simpleReference_20
        arr > @
      [] > simpleReference_21
        low > @
      [] > binary_11
        simpleReference_23.sub > @
          literal_18
      [] > simpleReference_23
        mid > @
      [] > literal_18
        prim__int.constructor_2 > @
          prim__int.new
          1
      [] > simpleReference_22
        key > @
      [] > empty_4
        TRUE > @
      [] > return_2
        methodInvocation_3 > @
      [] > methodInvocation_3
        this.binarySearch > @
          this
          simpleReference_24
          binary_12
          simpleReference_25
          simpleReference_26
      [] > simpleReference_24
        arr > @
      [] > binary_12
        simpleReference_27.add > @
          literal_19
      [] > simpleReference_27
        mid > @
      [] > literal_19
        prim__int.constructor_2 > @
          prim__int.new
          1
      [] > simpleReference_25
        high > @
      [] > simpleReference_26
        key > @
    [] > empty_2
      TRUE > @
    [] > return_1
      unaryPrefix_2 > @
    [] > unaryPrefix_2
      literal_20.neg > @
    [] > literal_20
      prim__int.constructor_2 > @
        prim__int.new
        1
  # null :: null -> void
  [this] > constructor
    seq > @
      initialization
      statementExpression_4
      this
    [] > initialization
      this.init > @
        this
    [] > statementExpression_4
      this.super.constructor > @
        this.super

[args...] > main
  class__BinarySearch.main > @
    *