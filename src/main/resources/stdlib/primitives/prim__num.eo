+package stdlib.primitives
+alias stdlib.primitives.prim__boolean
+alias org.eolang.txt.sprintf

[] > prim__num
  0 > bits_len

  [] > new
    "prim__num" > prim_name
    "prim" > @
    memory' > v
    0 > bits_len

    [] > as-string
      seq > @
        sprintf "%d" (^.v)

    [self] > integer_part
      seq > @
        if.
          not.
            self.prim_name.eq "prim__boolean"
          if.
            and.
              not.
                self.prim_name.eq "prim__float"
              not.
                self.prim_name.eq "prim__double"
            self.v
            self.v.as-int
          if.
            self.v
            1
            0

    [self] > float_part
      seq > @
        if.
          not.
            self.prim_name.eq "prim__boolean"
          if.
            and.
              not.
                self.prim_name.eq "prim__float"
              not.
                self.prim_name.eq "prim__double"
            self.v.as-float
            self.v
          if.
            self.v
            1.0
            0.0

    [arg__right] > eq
      seq > @
        prim__boolean.constructor_2
          prim__boolean.new
          ^.v.eq
            arg__right.v

    [arg__right] > neq
      seq > @
        prim__boolean.constructor_2
          prim__boolean.new
          ^.v.neq
            arg__right.v

    [arg__right] > greater
      seq > @
        prim__boolean.constructor_2
          prim__boolean.new
          ^.v.gt
            arg__right.v

    [arg__right] > less
      seq > @
        prim__boolean.constructor_2
          prim__boolean.new
          ^.v.lt
            arg__right.v

    [arg__right] > geq
      seq > @
        prim__boolean.constructor_2
          prim__boolean.new
          ^.v.gte
            arg__right.v

    [arg__right] > leq
      seq > @
        prim__boolean.constructor_2
          prim__boolean.new
          ^.v.lte
            arg__right.v

  [self] > constructor_1
    seq > @
      self

  [self var__num] > constructor_2
    seq > @
      self.v.write var__num
      self

  [self another__num] > constructor_3
    seq > @
      self.v.write (another__num.v)
      self
