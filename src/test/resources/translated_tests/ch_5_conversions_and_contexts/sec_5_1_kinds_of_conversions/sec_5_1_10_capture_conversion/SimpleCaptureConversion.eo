# 2022-07-18T16:08:50.175291385
# j2eo team
+alias stdlib.lang.class__Object
+alias stdlib.lang.class__System
+alias stdlib.lang.class__String

[] > class__SimpleCaptureConversion
  class__Object > super
  super > @
  [] > new
    class__Object.new > super
    super > @
    "class__SimpleCaptureConversion" > className
    1 > address
    [this] > init
      seq > @
        TRUE
  # main :: String[] -> void
  [args] > main
    seq > @
      variableDeclaration_1
      variableDeclaration_2
      statementExpression_1
      statementExpression_2
    cage > s
    [] > variableDeclaration_1
      s.write > @
        initializerSimple_1
    [] > initializerSimple_1
      methodInvocation_1 > @
    [] > methodInvocation_1
      this.generateSome > @
        this
        literal_1
    [] > literal_1
      class__String.constructor_2 > @
        class__String.new
        "wow, capture"
    cage > f
    [] > variableDeclaration_2
      f.write > @
        initializerSimple_2
    [] > initializerSimple_2
      methodInvocation_2 > @
    [] > methodInvocation_2
      s.getSome > @
        s
    [] > statementExpression_1
      class__System.out.println > @
        class__System.out
        binary_1
    [] > binary_1
      literal_2.add > @
        methodInvocation_3
    [] > literal_2
      class__String.constructor_2 > @
        class__String.new
        "what is f.getClass() ? -> "
    [] > methodInvocation_3
      methodInvocation_4.getSimpleName > @
        methodInvocation_4
    [] > methodInvocation_4
      f.getClass > @
        f
    [] > statementExpression_2
      class__System.out.println > @
        class__System.out
        literal_3
    [] > literal_3
      class__String.constructor_2 > @
        class__String.new
        "passed"
  # null :: null -> void
  [this] > constructor
    seq > @
      initialization
      statementExpression_3
      this
    [] > initialization
      this.init > @
        this
    [] > statementExpression_3
      this.super.constructor > @
        this.super

[] > class__Some
  class__Object > super
  super > @
  [] > new
    class__Object.new > super
    super > @
    "class__Some" > className
    1 > address
    [this] > init
      seq > @
        TRUE
    cage > some
    # getSome :: null -> T
    [this] > getSome
      seq > @
        return_1
      [] > return_1
        simpleReference_3 > @
      [] > simpleReference_3
        some > @
  # null :: T -> void
  [this some] > constructor
    seq > @
      initialization
      statementExpression_4
      this
    [] > initialization
      this.init > @
        this
    [] > statementExpression_4
      fieldAccess_3.write > @
        simpleReference_4
    [] > fieldAccess_3
      this_3.some > @
    [] > this_3
      this > @
    [] > simpleReference_4
      some > @

[args...] > main
  class__SimpleCaptureConversion.main > @
    *