# 2022-07-14T15:49:17.102975400
# j2eo team
+alias stdlib.lang.class__System
+alias stdlib.primitives.prim__double
+alias stdlib.lang.class__Object
+alias stdlib.primitives.prim__int
+alias stdlib.lang.class__String

[] > class__FindSquareRootExample
  class__Object > super
  super > @
  [] > new
    class__Object.new > super
    super > @
    "class__FindSquareRootExample" > className
    [this] > init
      seq > @
        TRUE
  # main :: String[] -> void
  [args] > main
    seq > @
      variableDeclaration_1
      statementExpression_1
      statementExpression_2
    prim__int.constructor_1 > n
      prim__int.new
    [] > variableDeclaration_1
      n.write > @
        initializerSimple_1
    [] > initializerSimple_1
      literal_1 > @
    [] > literal_1
      prim__int.constructor_2 > @
        prim__int.new
        93
    [] > statementExpression_1
      class__System.out.println > @
        class__System.out
        binary_1
    [] > binary_1
      binary_2.add > @
        methodInvocation_1
    [] > binary_2
      binary_3.add > @
        literal_2
    [] > binary_3
      literal_3.add > @
        simpleReference_1
    [] > literal_3
      class__String.constructor_2 > @
        class__String.new
        "The square root of "
    [] > simpleReference_1
      n > @
    [] > literal_2
      class__String.constructor_2 > @
        class__String.new
        " is: "
    [] > methodInvocation_1
      this.squareRoot > @
        this
        simpleReference_2
    [] > simpleReference_2
      n > @
    [] > statementExpression_2
      class__System.out.println > @
        class__System.out
        literal_4
    [] > literal_4
      class__String.constructor_2 > @
        class__String.new
        "passed"
  # squareRoot :: int -> double
  [num] > squareRoot
    seq > @
      variableDeclaration_2
      variableDeclaration_3
      do_1
      return_1
    prim__double.constructor_1 > t
      prim__double.new
    [] > variableDeclaration_2
      TRUE > @
    prim__double.constructor_1 > sqrtroot
      prim__double.new
    [] > variableDeclaration_3
      sqrtroot.write > @
        initializerSimple_2
    [] > initializerSimple_2
      binary_4 > @
    [] > binary_4
      simpleReference_3.div > @
        literal_5
    [] > simpleReference_3
      num > @
    [] > literal_5
      prim__int.constructor_2 > @
        prim__int.new
        2
    [] > do_1
      binary_5.do > @
        [do_i]
          block_1 > @
    [] > binary_5
      parenthesized_1.not_eq > @
        literal_6
    [] > parenthesized_1
      binary_6 > @
    [] > binary_6
      simpleReference_4.sub > @
        simpleReference_5
    [] > simpleReference_4
      t > @
    [] > simpleReference_5
      sqrtroot > @
    [] > literal_6
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > block_1
      seq > @
        statementExpression_3
        statementExpression_4
      [] > statementExpression_3
        simpleReference_6.write > @
          simpleReference_7
      [] > simpleReference_6
        t > @
      [] > simpleReference_7
        sqrtroot > @
      [] > statementExpression_4
        simpleReference_8.write > @
          binary_7
      [] > simpleReference_8
        sqrtroot > @
      [] > binary_7
        parenthesized_2.div > @
          literal_7
      [] > parenthesized_2
        binary_8 > @
      [] > binary_8
        simpleReference_9.add > @
          parenthesized_3
      [] > simpleReference_9
        t > @
      [] > parenthesized_3
        binary_9 > @
      [] > binary_9
        simpleReference_10.div > @
          simpleReference_11
      [] > simpleReference_10
        num > @
      [] > simpleReference_11
        t > @
      [] > literal_7
        prim__int.constructor_2 > @
          prim__int.new
          2
    [] > return_1
      simpleReference_12 > @
    [] > simpleReference_12
      sqrtroot > @
  # null :: null -> void
  [this] > constructor
    seq > @
      initialization
      statementExpression_5
      this
    [] > initialization
      this.init > @
        this
    [] > statementExpression_5
      this.super.constructor > @
        this.super

[args...] > main
  class__FindSquareRootExample.main > @
    *