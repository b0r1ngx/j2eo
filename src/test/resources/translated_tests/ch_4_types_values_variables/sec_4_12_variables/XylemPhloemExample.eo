# 2022-07-13T17:59:03.004164200
# j2eo team
+package ch_4_types_values_variables.sec_4_12_variables
+alias stdlib.lang.class__System
+alias stdlib.lang.class__Object
+alias stdlib.primitives.prim__int
+alias stdlib.lang.class__String

[] > class__XylemPhloemExample
  class__Object > super
  super > @
  [] > new
    class__Object.new > super
    super > @
    "class__XylemPhloemExample" > className
    [this] > init
      seq > @
        TRUE
  # main :: String -> void
  [args[]] > main
    seq > @
      variableDeclaration_1
      variableDeclaration_2
      variableDeclaration_3
      variableDeclaration_4
      statementExpression_1
      statementExpression_2
      statementExpression_3
      while_1
      statementExpression_4
      statementExpression_5
      ifThenElse_1
      statementExpression_6
    prim__int.constructor_1 > num
      prim__int.new
    [] > variableDeclaration_1
      TRUE > @
    prim__int.constructor_1 > extreme_sum
      prim__int.new
    [] > variableDeclaration_2
      extreme_sum.write > @
        initializerSimple_1
    [] > initializerSimple_1
      literal_1 > @
    [] > literal_1
      prim__int.constructor_2 > @
        prim__int.new
        0
    prim__int.constructor_1 > mean_sum
      prim__int.new
    [] > variableDeclaration_3
      mean_sum.write > @
        initializerSimple_2
    [] > initializerSimple_2
      literal_2 > @
    [] > literal_2
      prim__int.constructor_2 > @
        prim__int.new
        0
    prim__int.constructor_1 > n
      prim__int.new
    [] > variableDeclaration_4
      TRUE > @
    [] > statementExpression_1
      simpleReference_1.write > @
        literal_3
    [] > simpleReference_1
      num > @
    [] > literal_3
      prim__int.constructor_2 > @
        prim__int.new
        376
    [] > statementExpression_2
      simpleReference_2.write > @
        methodInvocation_1
    [] > simpleReference_2
      num > @
    [] > methodInvocation_1
      Math.abs > @
        Math
        simpleReference_4
    [] > simpleReference_4
      num > @
    [] > statementExpression_3
      simpleReference_5.write > @
        simpleReference_6
    [] > simpleReference_5
      n > @
    [] > simpleReference_6
      num > @
    [] > while_1
      binary_1.while > @
        [while_i]
          block_1 > @
    [] > binary_1
      simpleReference_7.not_eq > @
        literal_4
    [] > simpleReference_7
      n > @
    [] > literal_4
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > block_1
      seq > @
        ifThenElse_2
        statementExpression_7
      [] > ifThenElse_2
        binary_2.if > @
          statementExpression_8
          statementExpression_9
      [] > binary_2
        binary_3.or > @
          binary_4
      [] > binary_3
        simpleReference_8.eq > @
          simpleReference_9
      [] > simpleReference_8
        n > @
      [] > simpleReference_9
        num > @
      [] > binary_4
        simpleReference_10.less > @
          literal_5
      [] > simpleReference_10
        n > @
      [] > literal_5
        prim__int.constructor_2 > @
          prim__int.new
          10
      [] > statementExpression_8
        simpleReference_11.write > @
          binary_5
      [] > simpleReference_11
        extreme_sum > @
      [] > binary_5
        simpleReference_12.add > @
          binary_6
      [] > simpleReference_12
        extreme_sum > @
      [] > binary_6
        simpleReference_13.binary_op_placeholder > @
          literal_6
      [] > simpleReference_13
        n > @
      [] > literal_6
        prim__int.constructor_2 > @
          prim__int.new
          10
      [] > statementExpression_9
        simpleReference_14.write > @
          binary_7
      [] > simpleReference_14
        mean_sum > @
      [] > binary_7
        simpleReference_15.add > @
          binary_8
      [] > simpleReference_15
        mean_sum > @
      [] > binary_8
        simpleReference_16.binary_op_placeholder > @
          literal_7
      [] > simpleReference_16
        n > @
      [] > literal_7
        prim__int.constructor_2 > @
          prim__int.new
          10
      [] > statementExpression_7
        simpleReference_17.write > @
          binary_9
      [] > simpleReference_17
        n > @
      [] > binary_9
        simpleReference_18.div > @
          literal_8
      [] > simpleReference_18
        n > @
      [] > literal_8
        prim__int.constructor_2 > @
          prim__int.new
          10
    [] > statementExpression_4
      class__System.out.println > @
        class__System.out
        binary_10
    [] > binary_10
      literal_9.add > @
        simpleReference_19
    [] > literal_9
      class__String.constructor_2 > @
        class__String.new
        "The sum of extreme digits: "
    [] > simpleReference_19
      extreme_sum > @
    [] > statementExpression_5
      class__System.out.println > @
        class__System.out
        binary_11
    [] > binary_11
      literal_10.add > @
        simpleReference_20
    [] > literal_10
      class__String.constructor_2 > @
        class__String.new
        "The sum of mean digits: "
    [] > simpleReference_20
      mean_sum > @
    [] > ifThenElse_1
      binary_12.if > @
        statementExpression_10
        statementExpression_11
    [] > binary_12
      simpleReference_21.eq > @
        simpleReference_22
    [] > simpleReference_21
      extreme_sum > @
    [] > simpleReference_22
      mean_sum > @
    [] > statementExpression_10
      class__System.out.println > @
        class__System.out
        binary_13
    [] > binary_13
      simpleReference_23.add > @
        literal_11
    [] > simpleReference_23
      num > @
    [] > literal_11
      class__String.constructor_2 > @
        class__String.new
        " is a xylem number."
    [] > statementExpression_11
      class__System.out.println > @
        class__System.out
        binary_14
    [] > binary_14
      simpleReference_24.add > @
        literal_12
    [] > simpleReference_24
      num > @
    [] > literal_12
      class__String.constructor_2 > @
        class__String.new
        " is a phloem number."
    [] > statementExpression_6
      class__System.out.println > @
        class__System.out
        literal_13
    [] > literal_13
      class__String.constructor_2 > @
        class__String.new
        "passed"
  # null :: null -> void
  [this] > constructor
    seq > @
      initialization
      statementExpression_12
      this
    [] > initialization
      this.init > @
        this
    [] > statementExpression_12
      this.super.constructor > @
        this.super