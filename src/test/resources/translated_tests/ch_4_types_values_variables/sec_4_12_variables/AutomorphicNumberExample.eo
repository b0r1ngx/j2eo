# 2022-07-18T16:09:41.390941900
# j2eo team
+alias stdlib.lang.class__System
+alias stdlib.lang.class__Object
+alias stdlib.primitives.prim__boolean
+alias stdlib.primitives.prim__int
+alias stdlib.lang.class__String

[] > class__AutomorphicNumberExample
  class__Object > super
  super > @
  [] > new
    class__Object.new > super
    super > @
    "class__AutomorphicNumberExample" > className
    1 > address
    [this] > init
      seq > @
        TRUE
  # isAutomorphic :: int -> boolean
  [num] > isAutomorphic
    seq > @
      variableDeclaration_1
      while_1
      return_1
    prim__int.constructor_1 > square
      prim__int.new
    [] > variableDeclaration_1
      square.write > @
        initializerSimple_1
    [] > initializerSimple_1
      binary_1 > @
    [] > binary_1
      simpleReference_1.mul > @
        simpleReference_2
    [] > simpleReference_1
      num > @
    [] > simpleReference_2
      num > @
    [] > while_1
      binary_2.while > @
        [while_i]
          block_1 > @
    [] > binary_2
      simpleReference_3.greater > @
        literal_1
    [] > simpleReference_3
      num > @
    [] > literal_1
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > block_1
      seq > @
        ifThenElse_1
        statementExpression_1
        statementExpression_2
      [] > ifThenElse_1
        binary_3.if > @
          return_2
          empty_2
      [] > binary_3
        binary_4.not_eq > @
          binary_5
      [] > binary_4
        simpleReference_4.binary_op_placeholder > @
          literal_2
      [] > simpleReference_4
        num > @
      [] > literal_2
        prim__int.constructor_2 > @
          prim__int.new
          10
      [] > binary_5
        simpleReference_5.binary_op_placeholder > @
          literal_3
      [] > simpleReference_5
        square > @
      [] > literal_3
        prim__int.constructor_2 > @
          prim__int.new
          10
      [] > return_2
        literal_4 > @
      [] > literal_4
        prim__boolean.constructor_2 > @
          prim__boolean.new
          FALSE
      [] > empty_2
        TRUE > @
      [] > statementExpression_1
        simpleReference_6.write > @
          binary_6
      [] > simpleReference_6
        num > @
      [] > binary_6
        simpleReference_7.div > @
          literal_5
      [] > simpleReference_7
        num > @
      [] > literal_5
        prim__int.constructor_2 > @
          prim__int.new
          10
      [] > statementExpression_2
        simpleReference_8.write > @
          binary_7
      [] > simpleReference_8
        square > @
      [] > binary_7
        simpleReference_9.div > @
          literal_6
      [] > simpleReference_9
        square > @
      [] > literal_6
        prim__int.constructor_2 > @
          prim__int.new
          10
    [] > return_1
      literal_7 > @
    [] > literal_7
      prim__boolean.constructor_2 > @
        prim__boolean.new
        TRUE
  # main :: String -> void
  [args[]] > main
    seq > @
      statementExpression_3
      statementExpression_4
      statementExpression_5
    [] > statementExpression_3
      class__System.out.println > @
        class__System.out
        simpleReference_10
    [] > simpleReference_10
      expression_placeholder > @
    [] > statementExpression_4
      class__System.out.println > @
        class__System.out
        simpleReference_11
    [] > simpleReference_11
      expression_placeholder > @
    [] > statementExpression_5
      class__System.out.println > @
        class__System.out
        literal_8
    [] > literal_8
      class__String.constructor_2 > @
        class__String.new
        "passed"
  # null :: null -> void
  [this] > constructor
    seq > @
      initialization
      statementExpression_6
      this
    [] > initialization
      this.init > @
        this
    [] > statementExpression_6
      this.super.constructor > @
        this.super