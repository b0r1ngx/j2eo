# 2022-07-18T16:09:52.363145770
# j2eo team
+alias stdlib.lang.class__System
+alias stdlib.lang.class__Object
+alias stdlib.primitives.prim__int
+alias stdlib.lang.class__String

[] > class__NumberToWordExample
  class__Object > super
  super > @
  [] > new
    class__Object.new > super
    super > @
    "class__NumberToWordExample" > className
    1 > address
    [this] > init
      seq > @
        TRUE
  # numberToWords :: char -> void
  [num[]] > numberToWords
    seq > @
      variableDeclaration_1
      ifThenElse_1
      ifThenElse_2
      variableDeclaration_2
      variableDeclaration_3
      variableDeclaration_4
      variableDeclaration_5
      statementExpression_1
      ifThenElse_3
      variableDeclaration_6
      while_1
    prim__int.constructor_1 > len
      prim__int.new
    [] > variableDeclaration_1
      len.write > @
        initializerSimple_1
    [] > initializerSimple_1
      fieldAccess_1 > @
    [] > fieldAccess_1
      simpleReference_1.length > @
    [] > simpleReference_1
      num > @
    [] > ifThenElse_1
      binary_1.if > @
        block_1
        empty_1
    [] > binary_1
      simpleReference_2.eq > @
        literal_1
    [] > simpleReference_2
      len > @
    [] > literal_1
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > block_1
      seq > @
        statementExpression_2
        return_1
      [] > statementExpression_2
        class__System.out.println > @
          class__System.out
          literal_2
      [] > literal_2
        class__String.constructor_2 > @
          class__String.new
          "The string is empty."
    [] > empty_1
      TRUE > @
    [] > ifThenElse_2
      binary_2.if > @
        block_2
        empty_2
    [] > binary_2
      simpleReference_3.greater > @
        literal_3
    [] > simpleReference_3
      len > @
    [] > literal_3
      prim__int.constructor_2 > @
        prim__int.new
        4
    [] > block_2
      seq > @
        statementExpression_3
        return_2
      [] > statementExpression_3
        class__System.out.println > @
          class__System.out
          literal_4
      [] > literal_4
        class__String.constructor_2 > @
          class__String.new
          "\n The given number has more than 4 digits."
    [] > empty_2
      TRUE > @
    cage > onedigit
    [] > variableDeclaration_2
      onedigit.write > @
        initializerSimple_2
    [] > initializerSimple_2
      arrayCreation_1 > @
    [] > arrayCreation_1
      FALSE > @
    cage > twodigits
    [] > variableDeclaration_3
      twodigits.write > @
        initializerSimple_3
    [] > initializerSimple_3
      arrayCreation_2 > @
    [] > arrayCreation_2
      FALSE > @
    cage > multipleoftens
    [] > variableDeclaration_4
      multipleoftens.write > @
        initializerSimple_4
    [] > initializerSimple_4
      arrayCreation_3 > @
    [] > arrayCreation_3
      FALSE > @
    cage > poweroftens
    [] > variableDeclaration_5
      poweroftens.write > @
        initializerSimple_5
    [] > initializerSimple_5
      arrayCreation_4 > @
    [] > arrayCreation_4
      FALSE > @
    [] > statementExpression_1
      class__System.out.print > @
        class__System.out
        binary_3
    [] > binary_3
      methodInvocation_1.add > @
        literal_5
    [] > methodInvocation_1
      class__String.valueOf > @
        simpleReference_5
    [] > simpleReference_5
      num > @
    [] > literal_5
      class__String.constructor_2 > @
        class__String.new
        ": "
    [] > ifThenElse_3
      binary_4.if > @
        block_3
        empty_3
    [] > binary_4
      simpleReference_6.eq > @
        literal_6
    [] > simpleReference_6
      len > @
    [] > literal_6
      prim__int.constructor_2 > @
        prim__int.new
        1
    [] > block_3
      seq > @
        statementExpression_4
        return_3
      [] > statementExpression_4
        class__System.out.println > @
          class__System.out
          arrayAccess_1
      [] > arrayAccess_1
        simpleReference_7.get > @
          binary_5.v
      [] > simpleReference_7
        onedigit > @
      [] > binary_5
        arrayAccess_2.sub > @
          literal_7
      [] > arrayAccess_2
        simpleReference_8.get > @
          literal_8.v
      [] > simpleReference_8
        num > @
      [] > literal_8
        prim__int.constructor_2 > @
          prim__int.new
          0
      [] > literal_7
        prim__int.constructor_2 > @
          prim__int.new
          123456
    [] > empty_3
      TRUE > @
    prim__int.constructor_1 > x
      prim__int.new
    [] > variableDeclaration_6
      x.write > @
        initializerSimple_6
    [] > initializerSimple_6
      literal_9 > @
    [] > literal_9
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > while_1
      binary_6.while > @
        [while_i]
          block_4 > @
    [] > binary_6
      simpleReference_9.less > @
        fieldAccess_6
    [] > simpleReference_9
      x > @
    [] > fieldAccess_6
      simpleReference_10.length > @
    [] > simpleReference_10
      num > @
    [] > block_4
      seq > @
        ifThenElse_4
        statementExpression_5
      [] > ifThenElse_4
        binary_7.if > @
          block_5
          block_6
      [] > binary_7
        simpleReference_11.geq > @
          literal_10
      [] > simpleReference_11
        len > @
      [] > literal_10
        prim__int.constructor_2 > @
          prim__int.new
          3
      [] > block_5
        seq > @
          ifThenElse_5
          statementExpression_6
        [] > ifThenElse_5
          binary_8.if > @
            block_7
            empty_6
        [] > binary_8
          binary_9.not_eq > @
            literal_11
        [] > binary_9
          arrayAccess_3.sub > @
            literal_12
        [] > arrayAccess_3
          simpleReference_12.get > @
            simpleReference_13.v
        [] > simpleReference_12
          num > @
        [] > simpleReference_13
          x > @
        [] > literal_12
          prim__int.constructor_2 > @
            prim__int.new
            123456
        [] > literal_11
          prim__int.constructor_2 > @
            prim__int.new
            0
        [] > block_7
          seq > @
            statementExpression_7
            statementExpression_8
          [] > statementExpression_7
            class__System.out.print > @
              class__System.out
              binary_10
          [] > binary_10
            arrayAccess_4.add > @
              literal_13
          [] > arrayAccess_4
            simpleReference_14.get > @
              binary_11.v
          [] > simpleReference_14
            onedigit > @
          [] > binary_11
            arrayAccess_5.sub > @
              literal_14
          [] > arrayAccess_5
            simpleReference_15.get > @
              simpleReference_16.v
          [] > simpleReference_15
            num > @
          [] > simpleReference_16
            x > @
          [] > literal_14
            prim__int.constructor_2 > @
              prim__int.new
              123456
          [] > literal_13
            class__String.constructor_2 > @
              class__String.new
              " "
          [] > statementExpression_8
            class__System.out.print > @
              class__System.out
              binary_12
          [] > binary_12
            arrayAccess_6.add > @
              literal_15
          [] > arrayAccess_6
            simpleReference_17.get > @
              binary_13.v
          [] > simpleReference_17
            poweroftens > @
          [] > binary_13
            simpleReference_18.sub > @
              literal_16
          [] > simpleReference_18
            len > @
          [] > literal_16
            prim__int.constructor_2 > @
              prim__int.new
              3
          [] > literal_15
            class__String.constructor_2 > @
              class__String.new
              " "
        [] > empty_6
          TRUE > @
        [] > statementExpression_6
          simpleReference_19.dec_pre > @
        [] > simpleReference_19
          len > @
      [] > block_6
        seq > @
          ifThenElse_6
        [] > ifThenElse_6
          binary_14.if > @
            block_8
            ifThenElse_7
        [] > binary_14
          binary_15.eq > @
            literal_17
        [] > binary_15
          arrayAccess_7.sub > @
            literal_18
        [] > arrayAccess_7
          simpleReference_20.get > @
            simpleReference_21.v
        [] > simpleReference_20
          num > @
        [] > simpleReference_21
          x > @
        [] > literal_18
          prim__int.constructor_2 > @
            prim__int.new
            123456
        [] > literal_17
          prim__int.constructor_2 > @
            prim__int.new
            1
        [] > block_8
          seq > @
            variableDeclaration_7
            statementExpression_9
            return_4
          prim__int.constructor_1 > sum
            prim__int.new
          [] > variableDeclaration_7
            sum.write > @
              initializerSimple_7
          [] > initializerSimple_7
            binary_16 > @
          [] > binary_16
            binary_17.sub > @
              literal_19
          [] > binary_17
            binary_18.add > @
              arrayAccess_8
          [] > binary_18
            arrayAccess_9.sub > @
              literal_20
          [] > arrayAccess_9
            simpleReference_22.get > @
              simpleReference_23.v
          [] > simpleReference_22
            num > @
          [] > simpleReference_23
            x > @
          [] > literal_20
            prim__int.constructor_2 > @
              prim__int.new
              123456
          [] > arrayAccess_8
            simpleReference_24.get > @
              binary_19.v
          [] > simpleReference_24
            num > @
          [] > binary_19
            simpleReference_25.add > @
              literal_21
          [] > simpleReference_25
            x > @
          [] > literal_21
            prim__int.constructor_2 > @
              prim__int.new
              1
          [] > literal_19
            prim__int.constructor_2 > @
              prim__int.new
              123456
          [] > statementExpression_9
            class__System.out.println > @
              class__System.out
              arrayAccess_10
          [] > arrayAccess_10
            simpleReference_26.get > @
              simpleReference_27.v
          [] > simpleReference_26
            twodigits > @
          [] > simpleReference_27
            sum > @
        [] > ifThenElse_7
          binary_20.if > @
            block_9
            block_10
        [] > binary_20
          binary_21.and > @
            binary_22
        [] > binary_21
          binary_23.eq > @
            literal_22
        [] > binary_23
          arrayAccess_11.sub > @
            literal_23
        [] > arrayAccess_11
          simpleReference_28.get > @
            simpleReference_29.v
        [] > simpleReference_28
          num > @
        [] > simpleReference_29
          x > @
        [] > literal_23
          prim__int.constructor_2 > @
            prim__int.new
            123456
        [] > literal_22
          prim__int.constructor_2 > @
            prim__int.new
            2
        [] > binary_22
          binary_24.eq > @
            literal_24
        [] > binary_24
          arrayAccess_12.sub > @
            literal_25
        [] > arrayAccess_12
          simpleReference_30.get > @
            binary_25.v
        [] > simpleReference_30
          num > @
        [] > binary_25
          simpleReference_31.add > @
            literal_26
        [] > simpleReference_31
          x > @
        [] > literal_26
          prim__int.constructor_2 > @
            prim__int.new
            1
        [] > literal_25
          prim__int.constructor_2 > @
            prim__int.new
            123456
        [] > literal_24
          prim__int.constructor_2 > @
            prim__int.new
            0
        [] > block_9
          seq > @
            statementExpression_10
            return_5
          [] > statementExpression_10
            class__System.out.println > @
              class__System.out
              literal_27
          [] > literal_27
            class__String.constructor_2 > @
              class__String.new
              "Twenty"
        [] > block_10
          seq > @
            variableDeclaration_8
            ifThenElse_8
            statementExpression_11
            ifThenElse_9
          prim__int.constructor_1 > i
            prim__int.new
          [] > variableDeclaration_8
            i.write > @
              initializerSimple_8
          [] > initializerSimple_8
            parenthesized_1 > @
          [] > parenthesized_1
            binary_26 > @
          [] > binary_26
            arrayAccess_13.sub > @
              literal_28
          [] > arrayAccess_13
            simpleReference_32.get > @
              simpleReference_33.v
          [] > simpleReference_32
            num > @
          [] > simpleReference_33
            x > @
          [] > literal_28
            prim__int.constructor_2 > @
              prim__int.new
              123456
          [] > ifThenElse_8
            binary_27.if > @
              statementExpression_12
              statementExpression_13
          [] > binary_27
            simpleReference_34.greater > @
              literal_29
          [] > simpleReference_34
            i > @
          [] > literal_29
            prim__int.constructor_2 > @
              prim__int.new
              0
          [] > statementExpression_12
            class__System.out.print > @
              class__System.out
              binary_28
          [] > binary_28
            arrayAccess_14.add > @
              literal_30
          [] > arrayAccess_14
            simpleReference_35.get > @
              simpleReference_36.v
          [] > simpleReference_35
            multipleoftens > @
          [] > simpleReference_36
            i > @
          [] > literal_30
            class__String.constructor_2 > @
              class__String.new
              " "
          [] > statementExpression_13
            class__System.out.print > @
              class__System.out
              literal_31
          [] > literal_31
            class__String.constructor_2 > @
              class__String.new
              ""
          [] > statementExpression_11
            simpleReference_37.inc_pre > @
          [] > simpleReference_37
            x > @
          [] > ifThenElse_9
            binary_29.if > @
              statementExpression_14
              empty_10
          [] > binary_29
            binary_30.not_eq > @
              literal_32
          [] > binary_30
            arrayAccess_15.sub > @
              literal_33
          [] > arrayAccess_15
            simpleReference_38.get > @
              simpleReference_39.v
          [] > simpleReference_38
            num > @
          [] > simpleReference_39
            x > @
          [] > literal_33
            prim__int.constructor_2 > @
              prim__int.new
              123456
          [] > literal_32
            prim__int.constructor_2 > @
              prim__int.new
              0
          [] > statementExpression_14
            class__System.out.println > @
              class__System.out
              arrayAccess_16
          [] > arrayAccess_16
            simpleReference_40.get > @
              binary_31.v
          [] > simpleReference_40
            onedigit > @
          [] > binary_31
            arrayAccess_17.sub > @
              literal_34
          [] > arrayAccess_17
            simpleReference_41.get > @
              simpleReference_42.v
          [] > simpleReference_41
            num > @
          [] > simpleReference_42
            x > @
          [] > literal_34
            prim__int.constructor_2 > @
              prim__int.new
              123456
          [] > empty_10
            TRUE > @
      [] > statementExpression_5
        simpleReference_43.inc_pre > @
      [] > simpleReference_43
        x > @
  # main :: String -> void
  [args[]] > main
    seq > @
      statementExpression_15
      statementExpression_16
      statementExpression_17
      statementExpression_18
      statementExpression_19
      statementExpression_20
      statementExpression_21
      statementExpression_22
      statementExpression_23
      statementExpression_24
    [] > statementExpression_15
      this.numberToWords > @
        this
        methodInvocation_2
    [] > methodInvocation_2
      unsupported_qualifier.toCharArray > @
        unsupported_qualifier
    [] > statementExpression_16
      this.numberToWords > @
        this
        methodInvocation_3
    [] > methodInvocation_3
      unsupported_qualifier.toCharArray > @
        unsupported_qualifier
    [] > statementExpression_17
      this.numberToWords > @
        this
        methodInvocation_4
    [] > methodInvocation_4
      unsupported_qualifier.toCharArray > @
        unsupported_qualifier
    [] > statementExpression_18
      this.numberToWords > @
        this
        methodInvocation_5
    [] > methodInvocation_5
      unsupported_qualifier.toCharArray > @
        unsupported_qualifier
    [] > statementExpression_19
      this.numberToWords > @
        this
        methodInvocation_6
    [] > methodInvocation_6
      unsupported_qualifier.toCharArray > @
        unsupported_qualifier
    [] > statementExpression_20
      this.numberToWords > @
        this
        methodInvocation_7
    [] > methodInvocation_7
      unsupported_qualifier.toCharArray > @
        unsupported_qualifier
    [] > statementExpression_21
      this.numberToWords > @
        this
        methodInvocation_8
    [] > methodInvocation_8
      unsupported_qualifier.toCharArray > @
        unsupported_qualifier
    [] > statementExpression_22
      this.numberToWords > @
        this
        methodInvocation_9
    [] > methodInvocation_9
      unsupported_qualifier.toCharArray > @
        unsupported_qualifier
    [] > statementExpression_23
      this.numberToWords > @
        this
        methodInvocation_10
    [] > methodInvocation_10
      unsupported_qualifier.toCharArray > @
        unsupported_qualifier
    [] > statementExpression_24
      class__System.out.println > @
        class__System.out
        literal_44
    [] > literal_44
      class__String.constructor_2 > @
        class__String.new
        "passed"
  # null :: null -> void
  [this] > constructor
    seq > @
      initialization
      statementExpression_25
      this
    [] > initialization
      this.init > @
        this
    [] > statementExpression_25
      this.super.constructor > @
        this.super