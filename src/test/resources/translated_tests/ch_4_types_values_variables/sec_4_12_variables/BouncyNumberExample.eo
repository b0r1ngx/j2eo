# 2022-07-18T16:08:53.785866958
# j2eo team
+alias stdlib.primitives.prim__char
+alias stdlib.lang.class__System
+alias stdlib.lang.class__Object
+alias stdlib.primitives.prim__boolean
+alias stdlib.primitives.prim__int
+alias stdlib.lang.class__String

[] > class__BouncyNumberExample
  class__Object > super
  super > @
  [] > new
    class__Object.new > super
    super > @
    "class__BouncyNumberExample" > className
    1 > address
    [this] > init
      seq > @
        TRUE
  # main :: String -> void
  [args[]] > main
    seq > @
      variableDeclaration_1
      ifThenElse_1
      statementExpression_1
    prim__int.constructor_1 > inputNumber
      prim__int.new
    [] > variableDeclaration_1
      inputNumber.write > @
        initializerSimple_1
    [] > initializerSimple_1
      literal_1 > @
    [] > literal_1
      prim__int.constructor_2 > @
        prim__int.new
        219
    [] > ifThenElse_1
      binary_1.if > @
        statementExpression_2
        statementExpression_3
    [] > binary_1
      binary_2.or > @
        binary_3
    [] > binary_2
      methodInvocation_1.or > @
        methodInvocation_2
    [] > methodInvocation_1
      this.isIncreasing > @
        this
        simpleReference_1
    [] > simpleReference_1
      inputNumber > @
    [] > methodInvocation_2
      this.isDecreasing > @
        this
        simpleReference_2
    [] > simpleReference_2
      inputNumber > @
    [] > binary_3
      simpleReference_3.less > @
        literal_2
    [] > simpleReference_3
      inputNumber > @
    [] > literal_2
      prim__int.constructor_2 > @
        prim__int.new
        101
    [] > statementExpression_2
      class__System.out.println > @
        class__System.out
        binary_4
    [] > binary_4
      simpleReference_4.add > @
        literal_3
    [] > simpleReference_4
      inputNumber > @
    [] > literal_3
      class__String.constructor_2 > @
        class__String.new
        " not a bouncy number."
    [] > statementExpression_3
      class__System.out.println > @
        class__System.out
        binary_5
    [] > binary_5
      simpleReference_5.add > @
        literal_4
    [] > simpleReference_5
      inputNumber > @
    [] > literal_4
      class__String.constructor_2 > @
        class__String.new
        " is a bouncy number."
    [] > statementExpression_1
      class__System.out.println > @
        class__System.out
        literal_5
    [] > literal_5
      class__String.constructor_2 > @
        class__String.new
        "passed"
  # isIncreasing :: int -> boolean
  [inputNumber] > isIncreasing
    seq > @
      variableDeclaration_2
      variableDeclaration_3
      variableDeclaration_4
      statementExpression_4
      return_1
    cage > str
    [] > variableDeclaration_2
      str.write > @
        initializerSimple_2
    [] > initializerSimple_2
      methodInvocation_3 > @
    [] > methodInvocation_3
      Integer.toString > @
        Integer
        simpleReference_7
    [] > simpleReference_7
      inputNumber > @
    prim__char.constructor_1 > digit
      prim__char.new
    [] > variableDeclaration_3
      TRUE > @
    prim__boolean.constructor_1 > flag
      prim__boolean.new
    [] > variableDeclaration_4
      flag.write > @
        initializerSimple_3
    [] > initializerSimple_3
      literal_6 > @
    [] > literal_6
      prim__boolean.constructor_2 > @
        prim__boolean.new
        TRUE
    [] > statementExpression_4
      for_loop_placeholder > @
    [] > return_1
      simpleReference_8 > @
    [] > simpleReference_8
      flag > @
  # isDecreasing :: int -> boolean
  [inputNumber] > isDecreasing
    seq > @
      variableDeclaration_5
      variableDeclaration_6
      variableDeclaration_7
      statementExpression_5
      return_2
    cage > str
    [] > variableDeclaration_5
      str.write > @
        initializerSimple_4
    [] > initializerSimple_4
      methodInvocation_4 > @
    [] > methodInvocation_4
      Integer.toString > @
        Integer
        simpleReference_10
    [] > simpleReference_10
      inputNumber > @
    prim__char.constructor_1 > digit
      prim__char.new
    [] > variableDeclaration_6
      TRUE > @
    prim__boolean.constructor_1 > flag
      prim__boolean.new
    [] > variableDeclaration_7
      flag.write > @
        initializerSimple_5
    [] > initializerSimple_5
      literal_7 > @
    [] > literal_7
      prim__boolean.constructor_2 > @
        prim__boolean.new
        TRUE
    [] > statementExpression_5
      for_loop_placeholder > @
    [] > return_2
      simpleReference_11 > @
    [] > simpleReference_11
      flag > @
  # null :: null -> void
  [this] > constructor
    seq > @
      initialization
      statementExpression_6
      this
    [] > initialization
      this.init > @
        this
    [] > statementExpression_6
      this.super.constructor > @
        this.super