+package stdlib.primitives
+alias stdlib.primitives.prim__num

[] > prim__byte
  prim__num > @
  127 > max_value
  -128 > min_value
  8 > bits_len

  [] > new
    prim__num.new > @
    "prim__byte" > prim_name
    8 > bits_len

    [] > inc_pre
      seq > @
        ^.v.write
          ^.v.plus
            1
        prim__byte.constructor_3
          prim__byte.new
          ^

    [] > dec_pre
      seq > @
        ^.v.write
          ^.v.minus
            1
        prim__byte.constructor_3
          prim__byte.new
          ^

    [] > inc_post
      prim__byte.constructor_1 > old
        prim__byte.new
      seq > @
        old.v.write
          ^.v
        ^.v.write
          ^.v.plus
            1
        old

    [] > dec_post
      prim__byte.constructor_1 > old
        prim__byte.new
      seq > @
        old.v.write
          ^.v
        ^.v.write
          ^.v.minus
            1
        old

    [arg__right] > write
      seq > @
        ^.v.write
          arg__right.v
        prim__byte.constructor_3
          prim__byte.new
          ^

    [arg__right] > add
      seq > @
        prim__byte.constructor_2
          prim__byte.new
          ^.v.plus
            arg__right.v

    [arg__right] > sub
      seq > @
        prim__byte.constructor_2
          prim__byte.new
          ^.v.minus
            arg__right.v

    [arg__right] > mul
      seq > @
        prim__byte.constructor_2
          prim__byte.new
          ^.v.times
            arg__right.v

    [arg__right] > div
      seq > @
        prim__byte.constructor_2
          prim__byte.new
          ^.v.div
            arg__right.v

    [arg__right] > mod
      seq > @
        prim__byte.constructor_2
          prim__byte.new
          ^.v.mod
            arg__right.v

    [arg__right] > left
      seq > @
        prim__byte.constructor_2
          prim__byte.new
          ^.v.left
            arg__right.v

    [arg__right] > right
      seq > @
        prim__byte.constructor_2
          prim__byte.new
          ^.v.arg__right
            arg__right.v

    [arg__right] > right_u
      seq > @
        prim__byte.constructor_2
          prim__byte.new
          if.
            arg__right.v.gt 0
            as-int.
              and.
                127.as-bytes.right
                  arg__right.v.minus 1
                as-bytes.
                  ^.v.right
                    arg__right.v
            ^.v.right
              arg__right.v

  [arg__right] > from
    arg__right.integer_part > right_value
    255.as-bytes > mask
    mask.not > inv_mask

    [] > is_floating_point
      or. > @
        arg__right.prim_name.eq "prim__float"
        arg__right.prim_name.eq "prim__double"

    [] > integer_case
      if. > @
        arg__right.byte_len.gt (prim__byte.byte_len)
        downcast
        upcast

    [] > downcast
      right_value.as-bytes.and mask > pseudo_res
      if. > @
        pseudo_res.as-int.gt prim__byte.max_value
        prim__byte.constructor_2
          prim__byte.new
          (inv_mask.or pseudo_res).as-int
        prim__byte.constructor_2
          prim__byte.new
          pseudo_res.as-int

    [] > upcast
      prim__byte.constructor_2 > @
        prim__byte.new
        right_value

    [] > floating_point_case
      if. > @
        right_value.gte (prim__byte.max_value)
        prim__byte.constructor_2
          prim__byte.new
          prim__byte.max_value
        if.
          right_value.lte (prim__byte.min_value)
          prim__byte.constructor_2
            prim__byte.new
            prim__byte.min_value
          prim__byte.constructor_2
            prim__byte.new
            right_value

    seq > @
      if.
        is_floating_point.not
        integer_case
        floating_point_case

  [self] > constructor_1
    seq > @
      prim__byte.@.constructor_1
        self.@
      self

  [self var__num] > constructor_2
    seq > @
      prim__byte.@.constructor_2
        self.@
        var__num
      self

  [self another__num] > constructor_3
    seq > @
      prim__byte.@.constructor_3
        self.@
        another__num
      self
