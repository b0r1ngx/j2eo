# 2022-07-14T15:53:36.072355200
# j2eo team
+alias stdlib.lang.class__System
+alias stdlib.lang.class__Object
+alias stdlib.primitives.prim__int
+alias stdlib.lang.class__String

[] > class__GCD
  class__Object > super
  super > @
  [] > new
    class__Object.new > super
    super > @
    "class__GCD" > className
    [this] > init
      seq > @
        TRUE
  # main :: String[] -> void
  [args] > main
    seq > @
      variableDeclaration_1
      variableDeclaration_2
      variableDeclaration_3
      statementExpression_1
      statementExpression_2
      statementExpression_3
      statementExpression_4
      statementExpression_5
      statementExpression_6
      statementExpression_7
    prim__int.constructor_1 > size
      prim__int.new
    [] > variableDeclaration_1
      size.write > @
        initializerSimple_1
    [] > initializerSimple_1
      literal_1 > @
    [] > literal_1
      prim__int.constructor_2 > @
        prim__int.new
        0
    prim__int.constructor_1 > arr
      prim__int.new
    [] > variableDeclaration_2
      arr.write > @
        initializerSimple_2
    [] > initializerSimple_2
      literal_2 > @
    [] > literal_2
      prim__int.constructor_2 > @
        prim__int.new
        0
    prim__int.constructor_1 > result
      prim__int.new
    [] > variableDeclaration_3
      result.write > @
        initializerSimple_3
    [] > initializerSimple_3
      literal_3 > @
    [] > literal_3
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > statementExpression_1
      simpleReference_1.write > @
        literal_4
    [] > simpleReference_1
      size > @
    [] > literal_4
      prim__int.constructor_2 > @
        prim__int.new
        10
    [] > statementExpression_2
      simpleReference_2.write > @
        arrayCreation_1
    [] > simpleReference_2
      arr > @
    [] > arrayCreation_1
      FALSE > @
    [] > statementExpression_3
      for_loop_placeholder > @
    [] > statementExpression_4
      simpleReference_3.write > @
        arrayAccess_1
    [] > simpleReference_3
      result > @
    [] > arrayAccess_1
      simpleReference_4.get > @
        literal_5.v
    [] > simpleReference_4
      arr > @
    [] > literal_5
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > statementExpression_5
      for_loop_placeholder > @
    [] > statementExpression_6
      class__System.out.println > @
        class__System.out
        binary_1
    [] > binary_1
      literal_6.add > @
        simpleReference_5
    [] > literal_6
      class__String.constructor_2 > @
        class__String.new
        "GCD = "
    [] > simpleReference_5
      result > @
    [] > statementExpression_7
      class__System.out.println > @
        class__System.out
        literal_7
    [] > literal_7
      class__String.constructor_2 > @
        class__String.new
        "passed"
  # findHCF :: int -> int -> int
  [num1 num2] > findHCF
    seq > @
      while_1
      return_1
    [] > while_1
      binary_2.while > @
        [while_i]
          block_1 > @
    [] > binary_2
      simpleReference_6.not_eq > @
        simpleReference_7
    [] > simpleReference_6
      num1 > @
    [] > simpleReference_7
      num2 > @
    [] > block_1
      seq > @
        ifThenElse_1
      [] > ifThenElse_1
        binary_3.if > @
          statementExpression_8
          statementExpression_9
      [] > binary_3
        simpleReference_8.greater > @
          simpleReference_9
      [] > simpleReference_8
        num1 > @
      [] > simpleReference_9
        num2 > @
      [] > statementExpression_8
        simpleReference_10.write > @
          binary_4
      [] > simpleReference_10
        num1 > @
      [] > binary_4
        simpleReference_11.sub > @
          simpleReference_12
      [] > simpleReference_11
        num1 > @
      [] > simpleReference_12
        num2 > @
      [] > statementExpression_9
        simpleReference_13.write > @
          binary_5
      [] > simpleReference_13
        num2 > @
      [] > binary_5
        simpleReference_14.sub > @
          simpleReference_15
      [] > simpleReference_14
        num2 > @
      [] > simpleReference_15
        num1 > @
    [] > return_1
      simpleReference_16 > @
    [] > simpleReference_16
      num1 > @
  # null :: null -> void
  [this] > constructor
    seq > @
      initialization
      statementExpression_10
      this
    [] > initialization
      this.init > @
        this
    [] > statementExpression_10
      this.super.constructor > @
        this.super

[args...] > main
  class__GCD.main > @
    *