# 2022-07-14T15:58:32.275564
# j2eo team
+alias stdlib.primitives.prim__float
+alias stdlib.lang.class__System
+alias stdlib.primitives.prim__double
+alias stdlib.lang.class__Object
+alias stdlib.primitives.prim__boolean
+alias stdlib.lang.class__String

[] > class__CheckPerfectSquareExample
  class__Object > super
  super > @
  [] > new
    class__Object.new > super
    super > @
    "class__CheckPerfectSquareExample" > className
    [this] > init
      seq > @
        TRUE
  # checkPerfectSquare :: double -> boolean
  [number] > checkPerfectSquare
    seq > @
      variableDeclaration_1
      return_1
    prim__double.constructor_1 > sqrt
      prim__double.new
    [] > variableDeclaration_1
      sqrt.write > @
        initializerSimple_1
    [] > initializerSimple_1
      methodInvocation_1 > @
    [] > methodInvocation_1
      Math.sqrt > @
        Math
        simpleReference_2
    [] > simpleReference_2
      number > @
    [] > return_1
      parenthesized_1 > @
    [] > parenthesized_1
      binary_1 > @
    [] > binary_1
      parenthesized_2.eq > @
        literal_1
    [] > parenthesized_2
      binary_2 > @
    [] > binary_2
      simpleReference_3.sub > @
        methodInvocation_2
    [] > simpleReference_3
      sqrt > @
    [] > methodInvocation_2
      Math.floor > @
        Math
        simpleReference_5
    [] > simpleReference_5
      sqrt > @
    [] > literal_1
      prim__int.constructor_2 > @
        prim__int.new
        0
  # main :: String[] -> void
  [args] > main
    seq > @
      variableDeclaration_2
      ifThenElse_1
      statementExpression_1
      statementExpression_2
    prim__double.constructor_1 > number
      prim__double.new
    [] > variableDeclaration_2
      number.write > @
        initializerSimple_2
    [] > initializerSimple_2
      literal_2 > @
    [] > literal_2
      prim__float.constructor_2 > @
        prim__float.new
        9.0
    [] > ifThenElse_1
      methodInvocation_3.if > @
        statementExpression_3
        statementExpression_4
    [] > methodInvocation_3
      this.checkPerfectSquare > @
        this
        simpleReference_6
    [] > simpleReference_6
      number > @
    [] > statementExpression_3
      class__System.out.print > @
        class__System.out
        literal_3
    [] > literal_3
      class__String.constructor_2 > @
        class__String.new
        "Yes, the given number is perfect square."
    [] > statementExpression_4
      class__System.out.print > @
        class__System.out
        literal_4
    [] > literal_4
      class__String.constructor_2 > @
        class__String.new
        "No, the given number is not perfect square."
    [] > statementExpression_1
      class__System.out.println > @
        class__System.out
    [] > statementExpression_2
      class__System.out.println > @
        class__System.out
        literal_5
    [] > literal_5
      class__String.constructor_2 > @
        class__String.new
        "passed"
  # null :: null -> void
  [this] > constructor
    seq > @
      initialization
      statementExpression_5
      this
    [] > initialization
      this.init > @
        this
    [] > statementExpression_5
      this.super.constructor > @
        this.super

[args...] > main
  class__CheckPerfectSquareExample.main > @
    *