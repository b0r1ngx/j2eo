# 2022-07-18T16:12:58.707517889
# j2eo team
+alias stdlib.lang.class__System
+alias stdlib.lang.class__Object
+alias stdlib.primitives.prim__boolean
+alias stdlib.primitives.prim__int
+alias stdlib.lang.class__String

[] > class__SmithNumberExample
  class__Object > super
  super > @
  [] > new
    class__Object.new > super
    super > @
    "class__SmithNumberExample" > className
    1 > address
    [this] > init
      seq > @
        TRUE
  # findSumPrimeFactors :: int -> int
  [n] > findSumPrimeFactors
    seq > @
      variableDeclaration_1
      variableDeclaration_2
      while_1
      return_1
    prim__int.constructor_1 > i
      prim__int.new
    [] > variableDeclaration_1
      i.write > @
        initializerSimple_1
    [] > initializerSimple_1
      literal_1 > @
    [] > literal_1
      prim__int.constructor_2 > @
        prim__int.new
        2
    prim__int.constructor_1 > sum
      prim__int.new
    [] > variableDeclaration_2
      sum.write > @
        initializerSimple_2
    [] > initializerSimple_2
      literal_2 > @
    [] > literal_2
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > while_1
      binary_1.while > @
        [while_i]
          block_1 > @
    [] > binary_1
      simpleReference_1.greater > @
        literal_3
    [] > simpleReference_1
      n > @
    [] > literal_3
      prim__int.constructor_2 > @
        prim__int.new
        1
    [] > block_1
      seq > @
        ifThenElse_1
      [] > ifThenElse_1
        binary_2.if > @
          block_2
          block_3
      [] > binary_2
        binary_3.eq > @
          literal_4
      [] > binary_3
        simpleReference_2.binary_op_placeholder > @
          simpleReference_3
      [] > simpleReference_2
        n > @
      [] > simpleReference_3
        i > @
      [] > literal_4
        prim__int.constructor_2 > @
          prim__int.new
          0
      [] > block_2
        seq > @
          statementExpression_1
          statementExpression_2
        [] > statementExpression_1
          simpleReference_4.write > @
            binary_4
        [] > simpleReference_4
          sum > @
        [] > binary_4
          simpleReference_5.add > @
            methodInvocation_1
        [] > simpleReference_5
          sum > @
        [] > methodInvocation_1
          this.findSumOfDigit > @
            this
            simpleReference_6
        [] > simpleReference_6
          i > @
        [] > statementExpression_2
          simpleReference_7.write > @
            binary_5
        [] > simpleReference_7
          n > @
        [] > binary_5
          simpleReference_8.div > @
            simpleReference_9
        [] > simpleReference_8
          n > @
        [] > simpleReference_9
          i > @
      [] > block_3
        seq > @
          do_1
        [] > do_1
          unaryPrefix_1.do > @
            [do_i]
              block_4 > @
        [] > unaryPrefix_1
          methodInvocation_2.unary_placeholder > @
        [] > methodInvocation_2
          this.isPrime > @
            this
            simpleReference_10
        [] > simpleReference_10
          i > @
        [] > block_4
          seq > @
            statementExpression_3
          [] > statementExpression_3
            simpleReference_11.inc_post > @
          [] > simpleReference_11
            i > @
    [] > return_1
      simpleReference_12 > @
    [] > simpleReference_12
      sum > @
  # findSumOfDigit :: int -> int
  [n] > findSumOfDigit
    seq > @
      variableDeclaration_3
      while_2
      return_2
    prim__int.constructor_1 > s
      prim__int.new
    [] > variableDeclaration_3
      s.write > @
        initializerSimple_3
    [] > initializerSimple_3
      literal_5 > @
    [] > literal_5
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > while_2
      binary_6.while > @
        [while_i]
          block_5 > @
    [] > binary_6
      simpleReference_13.greater > @
        literal_6
    [] > simpleReference_13
      n > @
    [] > literal_6
      prim__int.constructor_2 > @
        prim__int.new
        0
    [] > block_5
      seq > @
        statementExpression_4
        statementExpression_5
      [] > statementExpression_4
        simpleReference_14.write > @
          binary_7
      [] > simpleReference_14
        s > @
      [] > binary_7
        simpleReference_15.add > @
          binary_8
      [] > simpleReference_15
        s > @
      [] > binary_8
        simpleReference_16.binary_op_placeholder > @
          literal_7
      [] > simpleReference_16
        n > @
      [] > literal_7
        prim__int.constructor_2 > @
          prim__int.new
          10
      [] > statementExpression_5
        simpleReference_17.write > @
          binary_9
      [] > simpleReference_17
        n > @
      [] > binary_9
        simpleReference_18.div > @
          literal_8
      [] > simpleReference_18
        n > @
      [] > literal_8
        prim__int.constructor_2 > @
          prim__int.new
          10
    [] > return_2
      simpleReference_19 > @
    [] > simpleReference_19
      s > @
  # isPrime :: int -> boolean
  [k] > isPrime
    seq > @
      variableDeclaration_4
      variableDeclaration_5
      while_3
      return_3
    prim__boolean.constructor_1 > b
      prim__boolean.new
    [] > variableDeclaration_4
      b.write > @
        initializerSimple_4
    [] > initializerSimple_4
      literal_9 > @
    [] > literal_9
      prim__boolean.constructor_2 > @
        prim__boolean.new
        TRUE
    prim__int.constructor_1 > d
      prim__int.new
    [] > variableDeclaration_5
      d.write > @
        initializerSimple_5
    [] > initializerSimple_5
      literal_10 > @
    [] > literal_10
      prim__int.constructor_2 > @
        prim__int.new
        2
    [] > while_3
      binary_10.while > @
        [while_i]
          block_6 > @
    [] > binary_10
      simpleReference_20.less > @
        methodInvocation_3
    [] > simpleReference_20
      d > @
    [] > methodInvocation_3
      Math.sqrt > @
        Math
        simpleReference_22
    [] > simpleReference_22
      k > @
    [] > block_6
      seq > @
        ifThenElse_2
        statementExpression_6
      [] > ifThenElse_2
        binary_11.if > @
          block_7
          empty_6
      [] > binary_11
        binary_12.eq > @
          literal_11
      [] > binary_12
        simpleReference_23.binary_op_placeholder > @
          simpleReference_24
      [] > simpleReference_23
        k > @
      [] > simpleReference_24
        d > @
      [] > literal_11
        prim__int.constructor_2 > @
          prim__int.new
          0
      [] > block_7
        seq > @
          statementExpression_7
        [] > statementExpression_7
          simpleReference_25.write > @
            literal_12
        [] > simpleReference_25
          b > @
        [] > literal_12
          prim__boolean.constructor_2 > @
            prim__boolean.new
            FALSE
      [] > empty_6
        TRUE > @
      [] > statementExpression_6
        simpleReference_26.inc_post > @
      [] > simpleReference_26
        d > @
    [] > return_3
      simpleReference_27 > @
    [] > simpleReference_27
      b > @
  # main :: String -> void
  [args[]] > main
    seq > @
      variableDeclaration_6
      variableDeclaration_7
      variableDeclaration_8
      statementExpression_8
      statementExpression_9
      ifThenElse_3
      statementExpression_10
      statementExpression_11
    prim__int.constructor_1 > n
      prim__int.new
    [] > variableDeclaration_6
      n.write > @
        initializerSimple_6
    [] > initializerSimple_6
      literal_13 > @
    [] > literal_13
      prim__int.constructor_2 > @
        prim__int.new
        373
    prim__int.constructor_1 > a
      prim__int.new
    [] > variableDeclaration_7
      a.write > @
        initializerSimple_7
    [] > initializerSimple_7
      methodInvocation_4 > @
    [] > methodInvocation_4
      this.findSumOfDigit > @
        this
        simpleReference_28
    [] > simpleReference_28
      n > @
    prim__int.constructor_1 > b
      prim__int.new
    [] > variableDeclaration_8
      b.write > @
        initializerSimple_8
    [] > initializerSimple_8
      methodInvocation_5 > @
    [] > methodInvocation_5
      this.findSumPrimeFactors > @
        this
        simpleReference_29
    [] > simpleReference_29
      n > @
    [] > statementExpression_8
      class__System.out.println > @
        class__System.out
        binary_13
    [] > binary_13
      literal_14.add > @
        simpleReference_30
    [] > literal_14
      class__String.constructor_2 > @
        class__String.new
        "Sum of Digits of the given number is = "
    [] > simpleReference_30
      a > @
    [] > statementExpression_9
      class__System.out.println > @
        class__System.out
        binary_14
    [] > binary_14
      literal_15.add > @
        simpleReference_31
    [] > literal_15
      class__String.constructor_2 > @
        class__String.new
        "Sum of digits of its prime factors is = "
    [] > simpleReference_31
      b > @
    [] > ifThenElse_3
      binary_15.if > @
        statementExpression_12
        statementExpression_13
    [] > binary_15
      simpleReference_32.eq > @
        simpleReference_33
    [] > simpleReference_32
      a > @
    [] > simpleReference_33
      b > @
    [] > statementExpression_12
      class__System.out.print > @
        class__System.out
        literal_16
    [] > literal_16
      class__String.constructor_2 > @
        class__String.new
        "The given number is a smith number."
    [] > statementExpression_13
      class__System.out.print > @
        class__System.out
        literal_17
    [] > literal_17
      class__String.constructor_2 > @
        class__String.new
        "The given number is not a smith number."
    [] > statementExpression_10
      class__System.out.println > @
        class__System.out
    [] > statementExpression_11
      class__System.out.println > @
        class__System.out
        literal_18
    [] > literal_18
      class__String.constructor_2 > @
        class__String.new
        "passed"
  # null :: null -> void
  [this] > constructor
    seq > @
      initialization
      statementExpression_14
      this
    [] > initialization
      this.init > @
        this
    [] > statementExpression_14
      this.super.constructor > @
        this.super